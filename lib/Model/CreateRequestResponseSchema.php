<?php
/**
 * CreateRequestResponseSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree\Model;

use \ArrayAccess;
use \Cashfree\ObjectSerializer;

/**
 * CreateRequestResponseSchema Class Doc Comment
 *
 * @category Class
 * @description Success response for creating a reverse penny order request&#x3D;
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateRequestResponseSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateRequestResponseSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'verification_id' => 'string',
        'ref_id' => 'int',
        'valid_upto' => 'string',
        'upi_link' => 'string',
        'paytm' => 'string',
        'bhim' => 'string',
        'gpay' => 'string',
        'phonepe' => 'string',
        'qr_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'verification_id' => null,
        'ref_id' => 'int64',
        'valid_upto' => null,
        'upi_link' => null,
        'paytm' => null,
        'bhim' => null,
        'gpay' => null,
        'phonepe' => null,
        'qr_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'verification_id' => false,
		'ref_id' => false,
		'valid_upto' => false,
		'upi_link' => false,
		'paytm' => false,
		'bhim' => false,
		'gpay' => false,
		'phonepe' => false,
		'qr_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'verification_id' => 'verification_id',
        'ref_id' => 'ref_id',
        'valid_upto' => 'valid_upto',
        'upi_link' => 'upi_link',
        'paytm' => 'paytm',
        'bhim' => 'bhim',
        'gpay' => 'gpay',
        'phonepe' => 'phonepe',
        'qr_code' => 'qr_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'verification_id' => 'setVerificationId',
        'ref_id' => 'setRefId',
        'valid_upto' => 'setValidUpto',
        'upi_link' => 'setUpiLink',
        'paytm' => 'setPaytm',
        'bhim' => 'setBhim',
        'gpay' => 'setGpay',
        'phonepe' => 'setPhonepe',
        'qr_code' => 'setQrCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'verification_id' => 'getVerificationId',
        'ref_id' => 'getRefId',
        'valid_upto' => 'getValidUpto',
        'upi_link' => 'getUpiLink',
        'paytm' => 'getPaytm',
        'bhim' => 'getBhim',
        'gpay' => 'getGpay',
        'phonepe' => 'getPhonepe',
        'qr_code' => 'getQrCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('verification_id', $data ?? [], null);
        $this->setIfExists('ref_id', $data ?? [], null);
        $this->setIfExists('valid_upto', $data ?? [], null);
        $this->setIfExists('upi_link', $data ?? [], null);
        $this->setIfExists('paytm', $data ?? [], null);
        $this->setIfExists('bhim', $data ?? [], null);
        $this->setIfExists('gpay', $data ?? [], null);
        $this->setIfExists('phonepe', $data ?? [], null);
        $this->setIfExists('qr_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets verification_id
     *
     * @return string|null
     */
    public function getVerificationId()
    {
        return $this->container['verification_id'];
    }

    /**
     * Sets verification_id
     *
     * @param string|null $verification_id It displays the unique ID you created to identify this API request.
     *
     * @return self
     */
    public function setVerificationId($verification_id)
    {
        if (is_null($verification_id)) {
            throw new \InvalidArgumentException('non-nullable verification_id cannot be null');
        }
        $this->container['verification_id'] = $verification_id;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return int|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param int|null $ref_id It displays the unique ID created by Cashfree Payments for reference purposes.
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        if (is_null($ref_id)) {
            throw new \InvalidArgumentException('non-nullable ref_id cannot be null');
        }
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets valid_upto
     *
     * @return string|null
     */
    public function getValidUpto()
    {
        return $this->container['valid_upto'];
    }

    /**
     * Sets valid_upto
     *
     * @param string|null $valid_upto It displays the time validity of the order request,
     *
     * @return self
     */
    public function setValidUpto($valid_upto)
    {
        if (is_null($valid_upto)) {
            throw new \InvalidArgumentException('non-nullable valid_upto cannot be null');
        }
        $this->container['valid_upto'] = $valid_upto;

        return $this;
    }

    /**
     * Gets upi_link
     *
     * @return string|null
     */
    public function getUpiLink()
    {
        return $this->container['upi_link'];
    }

    /**
     * Sets upi_link
     *
     * @param string|null $upi_link It displays the generated UPI link for the reverse penny order request.
     *
     * @return self
     */
    public function setUpiLink($upi_link)
    {
        if (is_null($upi_link)) {
            throw new \InvalidArgumentException('non-nullable upi_link cannot be null');
        }
        $this->container['upi_link'] = $upi_link;

        return $this;
    }

    /**
     * Gets paytm
     *
     * @return string|null
     */
    public function getPaytm()
    {
        return $this->container['paytm'];
    }

    /**
     * Sets paytm
     *
     * @param string|null $paytm It displays the generated Paytm link for the reverse penny order request.
     *
     * @return self
     */
    public function setPaytm($paytm)
    {
        if (is_null($paytm)) {
            throw new \InvalidArgumentException('non-nullable paytm cannot be null');
        }
        $this->container['paytm'] = $paytm;

        return $this;
    }

    /**
     * Gets bhim
     *
     * @return string|null
     */
    public function getBhim()
    {
        return $this->container['bhim'];
    }

    /**
     * Sets bhim
     *
     * @param string|null $bhim It displays the generated BHIM link for the reverse penny order request.
     *
     * @return self
     */
    public function setBhim($bhim)
    {
        if (is_null($bhim)) {
            throw new \InvalidArgumentException('non-nullable bhim cannot be null');
        }
        $this->container['bhim'] = $bhim;

        return $this;
    }

    /**
     * Gets gpay
     *
     * @return string|null
     */
    public function getGpay()
    {
        return $this->container['gpay'];
    }

    /**
     * Sets gpay
     *
     * @param string|null $gpay It displays the generated Gpay link for the reverse penny order request.
     *
     * @return self
     */
    public function setGpay($gpay)
    {
        if (is_null($gpay)) {
            throw new \InvalidArgumentException('non-nullable gpay cannot be null');
        }
        $this->container['gpay'] = $gpay;

        return $this;
    }

    /**
     * Gets phonepe
     *
     * @return string|null
     */
    public function getPhonepe()
    {
        return $this->container['phonepe'];
    }

    /**
     * Sets phonepe
     *
     * @param string|null $phonepe It displays the generated Phonepe link for the reverse penny order request.
     *
     * @return self
     */
    public function setPhonepe($phonepe)
    {
        if (is_null($phonepe)) {
            throw new \InvalidArgumentException('non-nullable phonepe cannot be null');
        }
        $this->container['phonepe'] = $phonepe;

        return $this;
    }

    /**
     * Gets qr_code
     *
     * @return string|null
     */
    public function getQrCode()
    {
        return $this->container['qr_code'];
    }

    /**
     * Sets qr_code
     *
     * @param string|null $qr_code It displays the generated QR code for the reverse penny order request.
     *
     * @return self
     */
    public function setQrCode($qr_code)
    {
        if (is_null($qr_code)) {
            throw new \InvalidArgumentException('non-nullable qr_code cannot be null');
        }
        $this->container['qr_code'] = $qr_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


