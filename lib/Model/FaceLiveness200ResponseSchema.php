<?php
/**
 * FaceLiveness200ResponseSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree\Model;

use \ArrayAccess;
use \Cashfree\ObjectSerializer;

/**
 * FaceLiveness200ResponseSchema Class Doc Comment
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FaceLiveness200ResponseSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FaceLiveness200ResponseSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'reference_id' => 'int',
        'verification_id' => 'string',
        'status' => 'string',
        'liveness' => 'bool',
        'liveness_score' => 'float',
        'gender' => '\Cashfree\Model\FaceLiveness200ResponseSchemaGender',
        'age_range' => '\Cashfree\Model\FaceLiveness200ResponseSchemaAgeRange',
        'eye_wear' => '\Cashfree\Model\FaceLiveness200ResponseSchemaEyeWear',
        'face_occluded' => '\Cashfree\Model\FaceLiveness200ResponseSchemaFaceOccluded',
        'quality' => '\Cashfree\Model\FaceLiveness200ResponseSchemaQuality',
        'pose' => '\Cashfree\Model\FaceLiveness200ResponseSchemaPose',
        'eyes_open' => '\Cashfree\Model\FaceLiveness200ResponseSchemaEyesOpen'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'reference_id' => null,
        'verification_id' => null,
        'status' => null,
        'liveness' => null,
        'liveness_score' => 'float',
        'gender' => null,
        'age_range' => null,
        'eye_wear' => null,
        'face_occluded' => null,
        'quality' => null,
        'pose' => null,
        'eyes_open' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'reference_id' => false,
		'verification_id' => false,
		'status' => false,
		'liveness' => false,
		'liveness_score' => false,
		'gender' => false,
		'age_range' => false,
		'eye_wear' => false,
		'face_occluded' => false,
		'quality' => false,
		'pose' => false,
		'eyes_open' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reference_id' => 'reference_id',
        'verification_id' => 'verification_id',
        'status' => 'status',
        'liveness' => 'liveness',
        'liveness_score' => 'liveness_score',
        'gender' => 'gender',
        'age_range' => 'age_range',
        'eye_wear' => 'eye_wear',
        'face_occluded' => 'face_occluded',
        'quality' => 'quality',
        'pose' => 'pose',
        'eyes_open' => 'eyes_open'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reference_id' => 'setReferenceId',
        'verification_id' => 'setVerificationId',
        'status' => 'setStatus',
        'liveness' => 'setLiveness',
        'liveness_score' => 'setLivenessScore',
        'gender' => 'setGender',
        'age_range' => 'setAgeRange',
        'eye_wear' => 'setEyeWear',
        'face_occluded' => 'setFaceOccluded',
        'quality' => 'setQuality',
        'pose' => 'setPose',
        'eyes_open' => 'setEyesOpen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reference_id' => 'getReferenceId',
        'verification_id' => 'getVerificationId',
        'status' => 'getStatus',
        'liveness' => 'getLiveness',
        'liveness_score' => 'getLivenessScore',
        'gender' => 'getGender',
        'age_range' => 'getAgeRange',
        'eye_wear' => 'getEyeWear',
        'face_occluded' => 'getFaceOccluded',
        'quality' => 'getQuality',
        'pose' => 'getPose',
        'eyes_open' => 'getEyesOpen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('reference_id', $data ?? [], null);
        $this->setIfExists('verification_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('liveness', $data ?? [], null);
        $this->setIfExists('liveness_score', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('age_range', $data ?? [], null);
        $this->setIfExists('eye_wear', $data ?? [], null);
        $this->setIfExists('face_occluded', $data ?? [], null);
        $this->setIfExists('quality', $data ?? [], null);
        $this->setIfExists('pose', $data ?? [], null);
        $this->setIfExists('eyes_open', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference_id
     *
     * @return int|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param int|null $reference_id Unique reference ID generated by Cashfree.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (is_null($reference_id)) {
            throw new \InvalidArgumentException('non-nullable reference_id cannot be null');
        }
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets verification_id
     *
     * @return string|null
     */
    public function getVerificationId()
    {
        return $this->container['verification_id'];
    }

    /**
     * Sets verification_id
     *
     * @param string|null $verification_id It displays the unique ID you created to identify this API request.
     *
     * @return self
     */
    public function setVerificationId($verification_id)
    {
        if (is_null($verification_id)) {
            throw new \InvalidArgumentException('non-nullable verification_id cannot be null');
        }
        $this->container['verification_id'] = $verification_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the face liveness verification request.  Possible values: - SUCCESS: Face verification completed successfully - REAL_FACE_NOT_DETECTED: The submitted image does not contain a real face - MULTIPLE_FACES_DETECTED: More than one face detected in the image - FACE_NOT_DETECTED: No face detected in the submitted image
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets liveness
     *
     * @return bool|null
     */
    public function getLiveness()
    {
        return $this->container['liveness'];
    }

    /**
     * Sets liveness
     *
     * @param bool|null $liveness Indicates whether the detected face exhibits signs of being from a live person.
     *
     * @return self
     */
    public function setLiveness($liveness)
    {
        if (is_null($liveness)) {
            throw new \InvalidArgumentException('non-nullable liveness cannot be null');
        }
        $this->container['liveness'] = $liveness;

        return $this;
    }

    /**
     * Gets liveness_score
     *
     * @return float|null
     */
    public function getLivenessScore()
    {
        return $this->container['liveness_score'];
    }

    /**
     * Sets liveness_score
     *
     * @param float|null $liveness_score A confidence score between 0 and 1 indicating the probability that the face is from a live person.
     *
     * @return self
     */
    public function setLivenessScore($liveness_score)
    {
        if (is_null($liveness_score)) {
            throw new \InvalidArgumentException('non-nullable liveness_score cannot be null');
        }
        $this->container['liveness_score'] = $liveness_score;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \Cashfree\Model\FaceLiveness200ResponseSchemaGender|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \Cashfree\Model\FaceLiveness200ResponseSchemaGender|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets age_range
     *
     * @return \Cashfree\Model\FaceLiveness200ResponseSchemaAgeRange|null
     */
    public function getAgeRange()
    {
        return $this->container['age_range'];
    }

    /**
     * Sets age_range
     *
     * @param \Cashfree\Model\FaceLiveness200ResponseSchemaAgeRange|null $age_range age_range
     *
     * @return self
     */
    public function setAgeRange($age_range)
    {
        if (is_null($age_range)) {
            throw new \InvalidArgumentException('non-nullable age_range cannot be null');
        }
        $this->container['age_range'] = $age_range;

        return $this;
    }

    /**
     * Gets eye_wear
     *
     * @return \Cashfree\Model\FaceLiveness200ResponseSchemaEyeWear|null
     */
    public function getEyeWear()
    {
        return $this->container['eye_wear'];
    }

    /**
     * Sets eye_wear
     *
     * @param \Cashfree\Model\FaceLiveness200ResponseSchemaEyeWear|null $eye_wear eye_wear
     *
     * @return self
     */
    public function setEyeWear($eye_wear)
    {
        if (is_null($eye_wear)) {
            throw new \InvalidArgumentException('non-nullable eye_wear cannot be null');
        }
        $this->container['eye_wear'] = $eye_wear;

        return $this;
    }

    /**
     * Gets face_occluded
     *
     * @return \Cashfree\Model\FaceLiveness200ResponseSchemaFaceOccluded|null
     */
    public function getFaceOccluded()
    {
        return $this->container['face_occluded'];
    }

    /**
     * Sets face_occluded
     *
     * @param \Cashfree\Model\FaceLiveness200ResponseSchemaFaceOccluded|null $face_occluded face_occluded
     *
     * @return self
     */
    public function setFaceOccluded($face_occluded)
    {
        if (is_null($face_occluded)) {
            throw new \InvalidArgumentException('non-nullable face_occluded cannot be null');
        }
        $this->container['face_occluded'] = $face_occluded;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return \Cashfree\Model\FaceLiveness200ResponseSchemaQuality|null
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param \Cashfree\Model\FaceLiveness200ResponseSchemaQuality|null $quality quality
     *
     * @return self
     */
    public function setQuality($quality)
    {
        if (is_null($quality)) {
            throw new \InvalidArgumentException('non-nullable quality cannot be null');
        }
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets pose
     *
     * @return \Cashfree\Model\FaceLiveness200ResponseSchemaPose|null
     */
    public function getPose()
    {
        return $this->container['pose'];
    }

    /**
     * Sets pose
     *
     * @param \Cashfree\Model\FaceLiveness200ResponseSchemaPose|null $pose pose
     *
     * @return self
     */
    public function setPose($pose)
    {
        if (is_null($pose)) {
            throw new \InvalidArgumentException('non-nullable pose cannot be null');
        }
        $this->container['pose'] = $pose;

        return $this;
    }

    /**
     * Gets eyes_open
     *
     * @return \Cashfree\Model\FaceLiveness200ResponseSchemaEyesOpen|null
     */
    public function getEyesOpen()
    {
        return $this->container['eyes_open'];
    }

    /**
     * Sets eyes_open
     *
     * @param \Cashfree\Model\FaceLiveness200ResponseSchemaEyesOpen|null $eyes_open eyes_open
     *
     * @return self
     */
    public function setEyesOpen($eyes_open)
    {
        if (is_null($eyes_open)) {
            throw new \InvalidArgumentException('non-nullable eyes_open cannot be null');
        }
        $this->container['eyes_open'] = $eyes_open;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


