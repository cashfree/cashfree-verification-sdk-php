<?php
/**
 * AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree\Model;

use \ArrayAccess;
use \Cashfree\ObjectSerializer;

/**
 * AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails Class Doc Comment
 *
 * @category Class
 * @description It contains additional information of the individual.
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdvanceEmploymentResponse_uan_details_inner_additional_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aadhaar' => 'string',
        'email' => 'string',
        'pan' => 'string',
        'ifsc' => 'string',
        'bank_account' => 'string',
        'bank_address' => 'string',
        'relation' => 'string',
        'relative_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aadhaar' => null,
        'email' => null,
        'pan' => null,
        'ifsc' => null,
        'bank_account' => null,
        'bank_address' => null,
        'relation' => null,
        'relative_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'aadhaar' => false,
		'email' => false,
		'pan' => false,
		'ifsc' => false,
		'bank_account' => false,
		'bank_address' => false,
		'relation' => false,
		'relative_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aadhaar' => 'aadhaar',
        'email' => 'email',
        'pan' => 'pan',
        'ifsc' => 'ifsc',
        'bank_account' => 'bank_account',
        'bank_address' => 'bank_address',
        'relation' => 'relation',
        'relative_name' => 'relative_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aadhaar' => 'setAadhaar',
        'email' => 'setEmail',
        'pan' => 'setPan',
        'ifsc' => 'setIfsc',
        'bank_account' => 'setBankAccount',
        'bank_address' => 'setBankAddress',
        'relation' => 'setRelation',
        'relative_name' => 'setRelativeName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aadhaar' => 'getAadhaar',
        'email' => 'getEmail',
        'pan' => 'getPan',
        'ifsc' => 'getIfsc',
        'bank_account' => 'getBankAccount',
        'bank_address' => 'getBankAddress',
        'relation' => 'getRelation',
        'relative_name' => 'getRelativeName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('aadhaar', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('pan', $data ?? [], null);
        $this->setIfExists('ifsc', $data ?? [], null);
        $this->setIfExists('bank_account', $data ?? [], null);
        $this->setIfExists('bank_address', $data ?? [], null);
        $this->setIfExists('relation', $data ?? [], null);
        $this->setIfExists('relative_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aadhaar
     *
     * @return string|null
     */
    public function getAadhaar()
    {
        return $this->container['aadhaar'];
    }

    /**
     * Sets aadhaar
     *
     * @param string|null $aadhaar It displays the aadhaar information of the individual.
     *
     * @return self
     */
    public function setAadhaar($aadhaar)
    {
        if (is_null($aadhaar)) {
            throw new \InvalidArgumentException('non-nullable aadhaar cannot be null');
        }
        $this->container['aadhaar'] = $aadhaar;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email It displays the email address of the individual.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets pan
     *
     * @return string|null
     */
    public function getPan()
    {
        return $this->container['pan'];
    }

    /**
     * Sets pan
     *
     * @param string|null $pan It displays the PAN information of the individual.
     *
     * @return self
     */
    public function setPan($pan)
    {
        if (is_null($pan)) {
            throw new \InvalidArgumentException('non-nullable pan cannot be null');
        }
        $this->container['pan'] = $pan;

        return $this;
    }

    /**
     * Gets ifsc
     *
     * @return string|null
     */
    public function getIfsc()
    {
        return $this->container['ifsc'];
    }

    /**
     * Sets ifsc
     *
     * @param string|null $ifsc It displays the IFSC information of the individual's bank account.
     *
     * @return self
     */
    public function setIfsc($ifsc)
    {
        if (is_null($ifsc)) {
            throw new \InvalidArgumentException('non-nullable ifsc cannot be null');
        }
        $this->container['ifsc'] = $ifsc;

        return $this;
    }

    /**
     * Gets bank_account
     *
     * @return string|null
     */
    public function getBankAccount()
    {
        return $this->container['bank_account'];
    }

    /**
     * Sets bank_account
     *
     * @param string|null $bank_account It displays the bank account number of the individual.
     *
     * @return self
     */
    public function setBankAccount($bank_account)
    {
        if (is_null($bank_account)) {
            throw new \InvalidArgumentException('non-nullable bank_account cannot be null');
        }
        $this->container['bank_account'] = $bank_account;

        return $this;
    }

    /**
     * Gets bank_address
     *
     * @return string|null
     */
    public function getBankAddress()
    {
        return $this->container['bank_address'];
    }

    /**
     * Sets bank_address
     *
     * @param string|null $bank_address It displays the address of the bank.
     *
     * @return self
     */
    public function setBankAddress($bank_address)
    {
        if (is_null($bank_address)) {
            throw new \InvalidArgumentException('non-nullable bank_address cannot be null');
        }
        $this->container['bank_address'] = $bank_address;

        return $this;
    }

    /**
     * Gets relation
     *
     * @return string|null
     */
    public function getRelation()
    {
        return $this->container['relation'];
    }

    /**
     * Sets relation
     *
     * @param string|null $relation It displays the realtionship of the individual with the relative.
     *
     * @return self
     */
    public function setRelation($relation)
    {
        if (is_null($relation)) {
            throw new \InvalidArgumentException('non-nullable relation cannot be null');
        }
        $this->container['relation'] = $relation;

        return $this;
    }

    /**
     * Gets relative_name
     *
     * @return string|null
     */
    public function getRelativeName()
    {
        return $this->container['relative_name'];
    }

    /**
     * Sets relative_name
     *
     * @param string|null $relative_name It displays the name of the relative.
     *
     * @return self
     */
    public function setRelativeName($relative_name)
    {
        if (is_null($relative_name)) {
            throw new \InvalidArgumentException('non-nullable relative_name cannot be null');
        }
        $this->container['relative_name'] = $relative_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


