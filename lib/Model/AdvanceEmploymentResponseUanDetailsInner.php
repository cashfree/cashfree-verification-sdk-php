<?php
/**
 * AdvanceEmploymentResponseUanDetailsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree\Model;

use \ArrayAccess;
use \Cashfree\ObjectSerializer;

/**
 * AdvanceEmploymentResponseUanDetailsInner Class Doc Comment
 *
 * @category Class
 * @description It contains the information in individual components.
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdvanceEmploymentResponseUanDetailsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdvanceEmploymentResponse_uan_details_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uan' => 'string',
        'source' => 'string',
        'source_score' => 'float',
        'basic_details' => '\Cashfree\Model\AdvanceEmploymentResponseUanDetailsInnerBasicDetails',
        'employment_details' => '\Cashfree\Model\AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails',
        'additional_details' => '\Cashfree\Model\AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'uan' => null,
        'source' => null,
        'source_score' => null,
        'basic_details' => null,
        'employment_details' => null,
        'additional_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'uan' => false,
		'source' => false,
		'source_score' => false,
		'basic_details' => false,
		'employment_details' => false,
		'additional_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uan' => 'uan',
        'source' => 'source',
        'source_score' => 'source_score',
        'basic_details' => 'basic_details',
        'employment_details' => 'employment_details',
        'additional_details' => 'additional_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uan' => 'setUan',
        'source' => 'setSource',
        'source_score' => 'setSourceScore',
        'basic_details' => 'setBasicDetails',
        'employment_details' => 'setEmploymentDetails',
        'additional_details' => 'setAdditionalDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uan' => 'getUan',
        'source' => 'getSource',
        'source_score' => 'getSourceScore',
        'basic_details' => 'getBasicDetails',
        'employment_details' => 'getEmploymentDetails',
        'additional_details' => 'getAdditionalDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('uan', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('source_score', $data ?? [], null);
        $this->setIfExists('basic_details', $data ?? [], null);
        $this->setIfExists('employment_details', $data ?? [], null);
        $this->setIfExists('additional_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uan
     *
     * @return string|null
     */
    public function getUan()
    {
        return $this->container['uan'];
    }

    /**
     * Sets uan
     *
     * @param string|null $uan It displays the Universal Account Number (UAN) information of the employee.
     *
     * @return self
     */
    public function setUan($uan)
    {
        if (is_null($uan)) {
            throw new \InvalidArgumentException('non-nullable uan cannot be null');
        }
        $this->container['uan'] = $uan;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source It displays the
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_score
     *
     * @return float|null
     */
    public function getSourceScore()
    {
        return $this->container['source_score'];
    }

    /**
     * Sets source_score
     *
     * @param float|null $source_score It displays the
     *
     * @return self
     */
    public function setSourceScore($source_score)
    {
        if (is_null($source_score)) {
            throw new \InvalidArgumentException('non-nullable source_score cannot be null');
        }
        $this->container['source_score'] = $source_score;

        return $this;
    }

    /**
     * Gets basic_details
     *
     * @return \Cashfree\Model\AdvanceEmploymentResponseUanDetailsInnerBasicDetails|null
     */
    public function getBasicDetails()
    {
        return $this->container['basic_details'];
    }

    /**
     * Sets basic_details
     *
     * @param \Cashfree\Model\AdvanceEmploymentResponseUanDetailsInnerBasicDetails|null $basic_details basic_details
     *
     * @return self
     */
    public function setBasicDetails($basic_details)
    {
        if (is_null($basic_details)) {
            throw new \InvalidArgumentException('non-nullable basic_details cannot be null');
        }
        $this->container['basic_details'] = $basic_details;

        return $this;
    }

    /**
     * Gets employment_details
     *
     * @return \Cashfree\Model\AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails|null
     */
    public function getEmploymentDetails()
    {
        return $this->container['employment_details'];
    }

    /**
     * Sets employment_details
     *
     * @param \Cashfree\Model\AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails|null $employment_details employment_details
     *
     * @return self
     */
    public function setEmploymentDetails($employment_details)
    {
        if (is_null($employment_details)) {
            throw new \InvalidArgumentException('non-nullable employment_details cannot be null');
        }
        $this->container['employment_details'] = $employment_details;

        return $this;
    }

    /**
     * Gets additional_details
     *
     * @return \Cashfree\Model\AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails|null
     */
    public function getAdditionalDetails()
    {
        return $this->container['additional_details'];
    }

    /**
     * Sets additional_details
     *
     * @param \Cashfree\Model\AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails|null $additional_details additional_details
     *
     * @return self
     */
    public function setAdditionalDetails($additional_details)
    {
        if (is_null($additional_details)) {
            throw new \InvalidArgumentException('non-nullable additional_details cannot be null');
        }
        $this->container['additional_details'] = $additional_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


