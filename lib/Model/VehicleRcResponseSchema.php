<?php
/**
 * VehicleRcResponseSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree\Model;

use \ArrayAccess;
use \Cashfree\ObjectSerializer;

/**
 * VehicleRcResponseSchema Class Doc Comment
 *
 * @category Class
 * @description Verify Vehicle RC success response
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VehicleRcResponseSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VehicleRcResponseSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'verification_id' => 'string',
        'reference_id' => 'int',
        'status' => 'string',
        'reg_no' => 'string',
        'class' => 'string',
        'chassis' => 'string',
        'engine' => 'string',
        'vehicle_manufacturer_name' => 'string',
        'model' => 'string',
        'vehicle_color' => 'string',
        'type' => 'string',
        'norms_type' => 'string',
        'body_type' => 'string',
        'owner_count' => 'string',
        'owner' => 'string',
        'owner_father_name' => 'string',
        'mobile_number' => 'string',
        'rc_status' => 'string',
        'status_as_on' => 'string',
        'reg_authority' => 'string',
        'reg_date' => 'string',
        'vehicle_manufacturing_month_year' => 'string',
        'rc_expiry_date' => 'string',
        'vehicle_tax_upto' => 'string',
        'vehicle_insurance_company_name' => 'string',
        'vehicle_insurance_upto' => 'string',
        'vehicle_insurance_policy_number' => 'string',
        'rc_financer' => 'string',
        'present_address' => 'string',
        'split_present_address' => '\Cashfree\Model\SplitAddress',
        'permanent_address' => 'string',
        'split_permanent_address' => '\Cashfree\Model\SplitAddress',
        'vehicle_cubic_capacity' => 'string',
        'gross_vehicle_weight' => 'string',
        'unladen_weight' => 'string',
        'vehicle_category' => 'string',
        'rc_standard_cap' => 'string',
        'vehicle_cylinders_no' => 'string',
        'vehicle_seat_capacity' => 'string',
        'vehicle_sleeper_capacity' => 'string',
        'vehicle_standing_capacity' => 'string',
        'wheelbase' => 'string',
        'vehicle_number' => 'string',
        'pucc_number' => 'string',
        'pucc_upto' => 'string',
        'blacklist_status' => 'string',
        'blacklist_details' => 'object',
        'challan_details' => 'object',
        'permit_issue_date' => 'string',
        'permit_number' => 'string',
        'permit_type' => 'string',
        'permit_valid_from' => 'string',
        'permit_valid_upto' => 'string',
        'non_use_status' => 'string',
        'non_use_from' => 'string',
        'non_use_to' => 'string',
        'national_permit_number' => 'string',
        'national_permit_upto' => 'string',
        'national_permit_issued_by' => 'string',
        'is_commercial' => 'bool',
        'noc_details' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'verification_id' => null,
        'reference_id' => null,
        'status' => null,
        'reg_no' => null,
        'class' => null,
        'chassis' => null,
        'engine' => null,
        'vehicle_manufacturer_name' => null,
        'model' => null,
        'vehicle_color' => null,
        'type' => null,
        'norms_type' => null,
        'body_type' => null,
        'owner_count' => null,
        'owner' => null,
        'owner_father_name' => null,
        'mobile_number' => null,
        'rc_status' => null,
        'status_as_on' => null,
        'reg_authority' => null,
        'reg_date' => null,
        'vehicle_manufacturing_month_year' => null,
        'rc_expiry_date' => null,
        'vehicle_tax_upto' => null,
        'vehicle_insurance_company_name' => null,
        'vehicle_insurance_upto' => null,
        'vehicle_insurance_policy_number' => null,
        'rc_financer' => null,
        'present_address' => null,
        'split_present_address' => null,
        'permanent_address' => null,
        'split_permanent_address' => null,
        'vehicle_cubic_capacity' => null,
        'gross_vehicle_weight' => null,
        'unladen_weight' => null,
        'vehicle_category' => null,
        'rc_standard_cap' => null,
        'vehicle_cylinders_no' => null,
        'vehicle_seat_capacity' => null,
        'vehicle_sleeper_capacity' => null,
        'vehicle_standing_capacity' => null,
        'wheelbase' => null,
        'vehicle_number' => null,
        'pucc_number' => null,
        'pucc_upto' => null,
        'blacklist_status' => null,
        'blacklist_details' => null,
        'challan_details' => null,
        'permit_issue_date' => null,
        'permit_number' => null,
        'permit_type' => null,
        'permit_valid_from' => null,
        'permit_valid_upto' => null,
        'non_use_status' => null,
        'non_use_from' => null,
        'non_use_to' => null,
        'national_permit_number' => null,
        'national_permit_upto' => null,
        'national_permit_issued_by' => null,
        'is_commercial' => null,
        'noc_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'verification_id' => false,
		'reference_id' => false,
		'status' => false,
		'reg_no' => false,
		'class' => false,
		'chassis' => false,
		'engine' => false,
		'vehicle_manufacturer_name' => false,
		'model' => false,
		'vehicle_color' => false,
		'type' => false,
		'norms_type' => false,
		'body_type' => false,
		'owner_count' => false,
		'owner' => false,
		'owner_father_name' => false,
		'mobile_number' => false,
		'rc_status' => false,
		'status_as_on' => false,
		'reg_authority' => false,
		'reg_date' => false,
		'vehicle_manufacturing_month_year' => false,
		'rc_expiry_date' => false,
		'vehicle_tax_upto' => false,
		'vehicle_insurance_company_name' => false,
		'vehicle_insurance_upto' => false,
		'vehicle_insurance_policy_number' => false,
		'rc_financer' => false,
		'present_address' => false,
		'split_present_address' => false,
		'permanent_address' => false,
		'split_permanent_address' => false,
		'vehicle_cubic_capacity' => false,
		'gross_vehicle_weight' => false,
		'unladen_weight' => false,
		'vehicle_category' => false,
		'rc_standard_cap' => false,
		'vehicle_cylinders_no' => false,
		'vehicle_seat_capacity' => false,
		'vehicle_sleeper_capacity' => false,
		'vehicle_standing_capacity' => false,
		'wheelbase' => false,
		'vehicle_number' => false,
		'pucc_number' => false,
		'pucc_upto' => false,
		'blacklist_status' => false,
		'blacklist_details' => false,
		'challan_details' => false,
		'permit_issue_date' => false,
		'permit_number' => false,
		'permit_type' => false,
		'permit_valid_from' => false,
		'permit_valid_upto' => false,
		'non_use_status' => false,
		'non_use_from' => false,
		'non_use_to' => false,
		'national_permit_number' => false,
		'national_permit_upto' => false,
		'national_permit_issued_by' => false,
		'is_commercial' => false,
		'noc_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'verification_id' => 'verification_id',
        'reference_id' => 'reference_id',
        'status' => 'status',
        'reg_no' => 'reg_no',
        'class' => 'class',
        'chassis' => 'chassis',
        'engine' => 'engine',
        'vehicle_manufacturer_name' => 'vehicle_manufacturer_name',
        'model' => 'model',
        'vehicle_color' => 'vehicle_color',
        'type' => 'type',
        'norms_type' => 'norms_type',
        'body_type' => 'body_type',
        'owner_count' => 'owner_count',
        'owner' => 'owner',
        'owner_father_name' => 'owner_father_name',
        'mobile_number' => 'mobile_number',
        'rc_status' => 'rc_status',
        'status_as_on' => 'status_as_on',
        'reg_authority' => 'reg_authority',
        'reg_date' => 'reg_date',
        'vehicle_manufacturing_month_year' => 'vehicle_manufacturing_month_year',
        'rc_expiry_date' => 'rc_expiry_date',
        'vehicle_tax_upto' => 'vehicle_tax_upto',
        'vehicle_insurance_company_name' => 'vehicle_insurance_company_name',
        'vehicle_insurance_upto' => 'vehicle_insurance_upto',
        'vehicle_insurance_policy_number' => 'vehicle_insurance_policy_number',
        'rc_financer' => 'rc_financer',
        'present_address' => 'present_address',
        'split_present_address' => 'split_present_address',
        'permanent_address' => 'permanent_address',
        'split_permanent_address' => 'split_permanent_address',
        'vehicle_cubic_capacity' => 'vehicle_cubic_capacity',
        'gross_vehicle_weight' => 'gross_vehicle_weight',
        'unladen_weight' => 'unladen_weight',
        'vehicle_category' => 'vehicle_category',
        'rc_standard_cap' => 'rc_standard_cap',
        'vehicle_cylinders_no' => 'vehicle_cylinders_no',
        'vehicle_seat_capacity' => 'vehicle_seat_capacity',
        'vehicle_sleeper_capacity' => 'vehicle_sleeper_capacity',
        'vehicle_standing_capacity' => 'vehicle_standing_capacity',
        'wheelbase' => 'wheelbase',
        'vehicle_number' => 'vehicle_number',
        'pucc_number' => 'pucc_number',
        'pucc_upto' => 'pucc_upto',
        'blacklist_status' => 'blacklist_status',
        'blacklist_details' => 'blacklist_details',
        'challan_details' => 'challan_details',
        'permit_issue_date' => 'permit_issue_date',
        'permit_number' => 'permit_number',
        'permit_type' => 'permit_type',
        'permit_valid_from' => 'permit_valid_from',
        'permit_valid_upto' => 'permit_valid_upto',
        'non_use_status' => 'non_use_status',
        'non_use_from' => 'non_use_from',
        'non_use_to' => 'non_use_to',
        'national_permit_number' => 'national_permit_number',
        'national_permit_upto' => 'national_permit_upto',
        'national_permit_issued_by' => 'national_permit_issued_by',
        'is_commercial' => 'is_commercial',
        'noc_details' => 'noc_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'verification_id' => 'setVerificationId',
        'reference_id' => 'setReferenceId',
        'status' => 'setStatus',
        'reg_no' => 'setRegNo',
        'class' => 'setClass',
        'chassis' => 'setChassis',
        'engine' => 'setEngine',
        'vehicle_manufacturer_name' => 'setVehicleManufacturerName',
        'model' => 'setModel',
        'vehicle_color' => 'setVehicleColor',
        'type' => 'setType',
        'norms_type' => 'setNormsType',
        'body_type' => 'setBodyType',
        'owner_count' => 'setOwnerCount',
        'owner' => 'setOwner',
        'owner_father_name' => 'setOwnerFatherName',
        'mobile_number' => 'setMobileNumber',
        'rc_status' => 'setRcStatus',
        'status_as_on' => 'setStatusAsOn',
        'reg_authority' => 'setRegAuthority',
        'reg_date' => 'setRegDate',
        'vehicle_manufacturing_month_year' => 'setVehicleManufacturingMonthYear',
        'rc_expiry_date' => 'setRcExpiryDate',
        'vehicle_tax_upto' => 'setVehicleTaxUpto',
        'vehicle_insurance_company_name' => 'setVehicleInsuranceCompanyName',
        'vehicle_insurance_upto' => 'setVehicleInsuranceUpto',
        'vehicle_insurance_policy_number' => 'setVehicleInsurancePolicyNumber',
        'rc_financer' => 'setRcFinancer',
        'present_address' => 'setPresentAddress',
        'split_present_address' => 'setSplitPresentAddress',
        'permanent_address' => 'setPermanentAddress',
        'split_permanent_address' => 'setSplitPermanentAddress',
        'vehicle_cubic_capacity' => 'setVehicleCubicCapacity',
        'gross_vehicle_weight' => 'setGrossVehicleWeight',
        'unladen_weight' => 'setUnladenWeight',
        'vehicle_category' => 'setVehicleCategory',
        'rc_standard_cap' => 'setRcStandardCap',
        'vehicle_cylinders_no' => 'setVehicleCylindersNo',
        'vehicle_seat_capacity' => 'setVehicleSeatCapacity',
        'vehicle_sleeper_capacity' => 'setVehicleSleeperCapacity',
        'vehicle_standing_capacity' => 'setVehicleStandingCapacity',
        'wheelbase' => 'setWheelbase',
        'vehicle_number' => 'setVehicleNumber',
        'pucc_number' => 'setPuccNumber',
        'pucc_upto' => 'setPuccUpto',
        'blacklist_status' => 'setBlacklistStatus',
        'blacklist_details' => 'setBlacklistDetails',
        'challan_details' => 'setChallanDetails',
        'permit_issue_date' => 'setPermitIssueDate',
        'permit_number' => 'setPermitNumber',
        'permit_type' => 'setPermitType',
        'permit_valid_from' => 'setPermitValidFrom',
        'permit_valid_upto' => 'setPermitValidUpto',
        'non_use_status' => 'setNonUseStatus',
        'non_use_from' => 'setNonUseFrom',
        'non_use_to' => 'setNonUseTo',
        'national_permit_number' => 'setNationalPermitNumber',
        'national_permit_upto' => 'setNationalPermitUpto',
        'national_permit_issued_by' => 'setNationalPermitIssuedBy',
        'is_commercial' => 'setIsCommercial',
        'noc_details' => 'setNocDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'verification_id' => 'getVerificationId',
        'reference_id' => 'getReferenceId',
        'status' => 'getStatus',
        'reg_no' => 'getRegNo',
        'class' => 'getClass',
        'chassis' => 'getChassis',
        'engine' => 'getEngine',
        'vehicle_manufacturer_name' => 'getVehicleManufacturerName',
        'model' => 'getModel',
        'vehicle_color' => 'getVehicleColor',
        'type' => 'getType',
        'norms_type' => 'getNormsType',
        'body_type' => 'getBodyType',
        'owner_count' => 'getOwnerCount',
        'owner' => 'getOwner',
        'owner_father_name' => 'getOwnerFatherName',
        'mobile_number' => 'getMobileNumber',
        'rc_status' => 'getRcStatus',
        'status_as_on' => 'getStatusAsOn',
        'reg_authority' => 'getRegAuthority',
        'reg_date' => 'getRegDate',
        'vehicle_manufacturing_month_year' => 'getVehicleManufacturingMonthYear',
        'rc_expiry_date' => 'getRcExpiryDate',
        'vehicle_tax_upto' => 'getVehicleTaxUpto',
        'vehicle_insurance_company_name' => 'getVehicleInsuranceCompanyName',
        'vehicle_insurance_upto' => 'getVehicleInsuranceUpto',
        'vehicle_insurance_policy_number' => 'getVehicleInsurancePolicyNumber',
        'rc_financer' => 'getRcFinancer',
        'present_address' => 'getPresentAddress',
        'split_present_address' => 'getSplitPresentAddress',
        'permanent_address' => 'getPermanentAddress',
        'split_permanent_address' => 'getSplitPermanentAddress',
        'vehicle_cubic_capacity' => 'getVehicleCubicCapacity',
        'gross_vehicle_weight' => 'getGrossVehicleWeight',
        'unladen_weight' => 'getUnladenWeight',
        'vehicle_category' => 'getVehicleCategory',
        'rc_standard_cap' => 'getRcStandardCap',
        'vehicle_cylinders_no' => 'getVehicleCylindersNo',
        'vehicle_seat_capacity' => 'getVehicleSeatCapacity',
        'vehicle_sleeper_capacity' => 'getVehicleSleeperCapacity',
        'vehicle_standing_capacity' => 'getVehicleStandingCapacity',
        'wheelbase' => 'getWheelbase',
        'vehicle_number' => 'getVehicleNumber',
        'pucc_number' => 'getPuccNumber',
        'pucc_upto' => 'getPuccUpto',
        'blacklist_status' => 'getBlacklistStatus',
        'blacklist_details' => 'getBlacklistDetails',
        'challan_details' => 'getChallanDetails',
        'permit_issue_date' => 'getPermitIssueDate',
        'permit_number' => 'getPermitNumber',
        'permit_type' => 'getPermitType',
        'permit_valid_from' => 'getPermitValidFrom',
        'permit_valid_upto' => 'getPermitValidUpto',
        'non_use_status' => 'getNonUseStatus',
        'non_use_from' => 'getNonUseFrom',
        'non_use_to' => 'getNonUseTo',
        'national_permit_number' => 'getNationalPermitNumber',
        'national_permit_upto' => 'getNationalPermitUpto',
        'national_permit_issued_by' => 'getNationalPermitIssuedBy',
        'is_commercial' => 'getIsCommercial',
        'noc_details' => 'getNocDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('verification_id', $data ?? [], null);
        $this->setIfExists('reference_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('reg_no', $data ?? [], null);
        $this->setIfExists('class', $data ?? [], null);
        $this->setIfExists('chassis', $data ?? [], null);
        $this->setIfExists('engine', $data ?? [], null);
        $this->setIfExists('vehicle_manufacturer_name', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('vehicle_color', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('norms_type', $data ?? [], null);
        $this->setIfExists('body_type', $data ?? [], null);
        $this->setIfExists('owner_count', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('owner_father_name', $data ?? [], null);
        $this->setIfExists('mobile_number', $data ?? [], null);
        $this->setIfExists('rc_status', $data ?? [], null);
        $this->setIfExists('status_as_on', $data ?? [], null);
        $this->setIfExists('reg_authority', $data ?? [], null);
        $this->setIfExists('reg_date', $data ?? [], null);
        $this->setIfExists('vehicle_manufacturing_month_year', $data ?? [], null);
        $this->setIfExists('rc_expiry_date', $data ?? [], null);
        $this->setIfExists('vehicle_tax_upto', $data ?? [], null);
        $this->setIfExists('vehicle_insurance_company_name', $data ?? [], null);
        $this->setIfExists('vehicle_insurance_upto', $data ?? [], null);
        $this->setIfExists('vehicle_insurance_policy_number', $data ?? [], null);
        $this->setIfExists('rc_financer', $data ?? [], null);
        $this->setIfExists('present_address', $data ?? [], null);
        $this->setIfExists('split_present_address', $data ?? [], null);
        $this->setIfExists('permanent_address', $data ?? [], null);
        $this->setIfExists('split_permanent_address', $data ?? [], null);
        $this->setIfExists('vehicle_cubic_capacity', $data ?? [], null);
        $this->setIfExists('gross_vehicle_weight', $data ?? [], null);
        $this->setIfExists('unladen_weight', $data ?? [], null);
        $this->setIfExists('vehicle_category', $data ?? [], null);
        $this->setIfExists('rc_standard_cap', $data ?? [], null);
        $this->setIfExists('vehicle_cylinders_no', $data ?? [], null);
        $this->setIfExists('vehicle_seat_capacity', $data ?? [], null);
        $this->setIfExists('vehicle_sleeper_capacity', $data ?? [], null);
        $this->setIfExists('vehicle_standing_capacity', $data ?? [], null);
        $this->setIfExists('wheelbase', $data ?? [], null);
        $this->setIfExists('vehicle_number', $data ?? [], null);
        $this->setIfExists('pucc_number', $data ?? [], null);
        $this->setIfExists('pucc_upto', $data ?? [], null);
        $this->setIfExists('blacklist_status', $data ?? [], null);
        $this->setIfExists('blacklist_details', $data ?? [], null);
        $this->setIfExists('challan_details', $data ?? [], null);
        $this->setIfExists('permit_issue_date', $data ?? [], null);
        $this->setIfExists('permit_number', $data ?? [], null);
        $this->setIfExists('permit_type', $data ?? [], null);
        $this->setIfExists('permit_valid_from', $data ?? [], null);
        $this->setIfExists('permit_valid_upto', $data ?? [], null);
        $this->setIfExists('non_use_status', $data ?? [], null);
        $this->setIfExists('non_use_from', $data ?? [], null);
        $this->setIfExists('non_use_to', $data ?? [], null);
        $this->setIfExists('national_permit_number', $data ?? [], null);
        $this->setIfExists('national_permit_upto', $data ?? [], null);
        $this->setIfExists('national_permit_issued_by', $data ?? [], null);
        $this->setIfExists('is_commercial', $data ?? [], null);
        $this->setIfExists('noc_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets verification_id
     *
     * @return string|null
     */
    public function getVerificationId()
    {
        return $this->container['verification_id'];
    }

    /**
     * Sets verification_id
     *
     * @param string|null $verification_id It displays the unique ID you created to identify the verification request.
     *
     * @return self
     */
    public function setVerificationId($verification_id)
    {
        if (is_null($verification_id)) {
            throw new \InvalidArgumentException('non-nullable verification_id cannot be null');
        }
        $this->container['verification_id'] = $verification_id;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return int|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param int|null $reference_id It displays the unique ID created by Cashfree Payments for reference purposes.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (is_null($reference_id)) {
            throw new \InvalidArgumentException('non-nullable reference_id cannot be null');
        }
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status It displays the status of the vehicle RC information.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets reg_no
     *
     * @return string|null
     */
    public function getRegNo()
    {
        return $this->container['reg_no'];
    }

    /**
     * Sets reg_no
     *
     * @param string|null $reg_no It displays the registration number of the vehicle.
     *
     * @return self
     */
    public function setRegNo($reg_no)
    {
        if (is_null($reg_no)) {
            throw new \InvalidArgumentException('non-nullable reg_no cannot be null');
        }
        $this->container['reg_no'] = $reg_no;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string|null $class It displays the category or type of the vehicle as recognised by the relevant transportation authorities.
     *
     * @return self
     */
    public function setClass($class)
    {
        if (is_null($class)) {
            throw new \InvalidArgumentException('non-nullable class cannot be null');
        }
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets chassis
     *
     * @return string|null
     */
    public function getChassis()
    {
        return $this->container['chassis'];
    }

    /**
     * Sets chassis
     *
     * @param string|null $chassis It displays the chassis information of the vehicle.
     *
     * @return self
     */
    public function setChassis($chassis)
    {
        if (is_null($chassis)) {
            throw new \InvalidArgumentException('non-nullable chassis cannot be null');
        }
        $this->container['chassis'] = $chassis;

        return $this;
    }

    /**
     * Gets engine
     *
     * @return string|null
     */
    public function getEngine()
    {
        return $this->container['engine'];
    }

    /**
     * Sets engine
     *
     * @param string|null $engine It displays the engine number of the vehicle.
     *
     * @return self
     */
    public function setEngine($engine)
    {
        if (is_null($engine)) {
            throw new \InvalidArgumentException('non-nullable engine cannot be null');
        }
        $this->container['engine'] = $engine;

        return $this;
    }

    /**
     * Gets vehicle_manufacturer_name
     *
     * @return string|null
     */
    public function getVehicleManufacturerName()
    {
        return $this->container['vehicle_manufacturer_name'];
    }

    /**
     * Sets vehicle_manufacturer_name
     *
     * @param string|null $vehicle_manufacturer_name It displays the manufacturer of the vehicle.
     *
     * @return self
     */
    public function setVehicleManufacturerName($vehicle_manufacturer_name)
    {
        if (is_null($vehicle_manufacturer_name)) {
            throw new \InvalidArgumentException('non-nullable vehicle_manufacturer_name cannot be null');
        }
        $this->container['vehicle_manufacturer_name'] = $vehicle_manufacturer_name;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model It displays the model number of the vehicle.
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets vehicle_color
     *
     * @return string|null
     */
    public function getVehicleColor()
    {
        return $this->container['vehicle_color'];
    }

    /**
     * Sets vehicle_color
     *
     * @param string|null $vehicle_color It displays the colour of the vehicle.
     *
     * @return self
     */
    public function setVehicleColor($vehicle_color)
    {
        if (is_null($vehicle_color)) {
            throw new \InvalidArgumentException('non-nullable vehicle_color cannot be null');
        }
        $this->container['vehicle_color'] = $vehicle_color;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type It displays the type of the vehicle.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets norms_type
     *
     * @return string|null
     */
    public function getNormsType()
    {
        return $this->container['norms_type'];
    }

    /**
     * Sets norms_type
     *
     * @param string|null $norms_type It displays the norms set by the Central Pollution Control Board (CPCB)
     *
     * @return self
     */
    public function setNormsType($norms_type)
    {
        if (is_null($norms_type)) {
            throw new \InvalidArgumentException('non-nullable norms_type cannot be null');
        }
        $this->container['norms_type'] = $norms_type;

        return $this;
    }

    /**
     * Gets body_type
     *
     * @return string|null
     */
    public function getBodyType()
    {
        return $this->container['body_type'];
    }

    /**
     * Sets body_type
     *
     * @param string|null $body_type It displays the body type of the vehicle.
     *
     * @return self
     */
    public function setBodyType($body_type)
    {
        if (is_null($body_type)) {
            throw new \InvalidArgumentException('non-nullable body_type cannot be null');
        }
        $this->container['body_type'] = $body_type;

        return $this;
    }

    /**
     * Gets owner_count
     *
     * @return string|null
     */
    public function getOwnerCount()
    {
        return $this->container['owner_count'];
    }

    /**
     * Sets owner_count
     *
     * @param string|null $owner_count It displays the number of owners of the vehicle.
     *
     * @return self
     */
    public function setOwnerCount($owner_count)
    {
        if (is_null($owner_count)) {
            throw new \InvalidArgumentException('non-nullable owner_count cannot be null');
        }
        $this->container['owner_count'] = $owner_count;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner It displays the name of the current owner of the vehicle.
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets owner_father_name
     *
     * @return string|null
     */
    public function getOwnerFatherName()
    {
        return $this->container['owner_father_name'];
    }

    /**
     * Sets owner_father_name
     *
     * @param string|null $owner_father_name It displays the father's name of the current owner of the vehicle.
     *
     * @return self
     */
    public function setOwnerFatherName($owner_father_name)
    {
        if (is_null($owner_father_name)) {
            throw new \InvalidArgumentException('non-nullable owner_father_name cannot be null');
        }
        $this->container['owner_father_name'] = $owner_father_name;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string|null
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string|null $mobile_number It displays the mobile number of the current owner of the vehicle.
     *
     * @return self
     */
    public function setMobileNumber($mobile_number)
    {
        if (is_null($mobile_number)) {
            throw new \InvalidArgumentException('non-nullable mobile_number cannot be null');
        }
        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets rc_status
     *
     * @return string|null
     */
    public function getRcStatus()
    {
        return $this->container['rc_status'];
    }

    /**
     * Sets rc_status
     *
     * @param string|null $rc_status It displays the status of the RC.
     *
     * @return self
     */
    public function setRcStatus($rc_status)
    {
        if (is_null($rc_status)) {
            throw new \InvalidArgumentException('non-nullable rc_status cannot be null');
        }
        $this->container['rc_status'] = $rc_status;

        return $this;
    }

    /**
     * Gets status_as_on
     *
     * @return string|null
     */
    public function getStatusAsOn()
    {
        return $this->container['status_as_on'];
    }

    /**
     * Sets status_as_on
     *
     * @param string|null $status_as_on It displays the particular date of the status of the RC.
     *
     * @return self
     */
    public function setStatusAsOn($status_as_on)
    {
        if (is_null($status_as_on)) {
            throw new \InvalidArgumentException('non-nullable status_as_on cannot be null');
        }
        $this->container['status_as_on'] = $status_as_on;

        return $this;
    }

    /**
     * Gets reg_authority
     *
     * @return string|null
     */
    public function getRegAuthority()
    {
        return $this->container['reg_authority'];
    }

    /**
     * Sets reg_authority
     *
     * @param string|null $reg_authority It displays the name of the registration authority.
     *
     * @return self
     */
    public function setRegAuthority($reg_authority)
    {
        if (is_null($reg_authority)) {
            throw new \InvalidArgumentException('non-nullable reg_authority cannot be null');
        }
        $this->container['reg_authority'] = $reg_authority;

        return $this;
    }

    /**
     * Gets reg_date
     *
     * @return string|null
     */
    public function getRegDate()
    {
        return $this->container['reg_date'];
    }

    /**
     * Sets reg_date
     *
     * @param string|null $reg_date It displays the date of registration of the vehicle.
     *
     * @return self
     */
    public function setRegDate($reg_date)
    {
        if (is_null($reg_date)) {
            throw new \InvalidArgumentException('non-nullable reg_date cannot be null');
        }
        $this->container['reg_date'] = $reg_date;

        return $this;
    }

    /**
     * Gets vehicle_manufacturing_month_year
     *
     * @return string|null
     */
    public function getVehicleManufacturingMonthYear()
    {
        return $this->container['vehicle_manufacturing_month_year'];
    }

    /**
     * Sets vehicle_manufacturing_month_year
     *
     * @param string|null $vehicle_manufacturing_month_year It displays the month and year of the manufacturing of the vehicle.
     *
     * @return self
     */
    public function setVehicleManufacturingMonthYear($vehicle_manufacturing_month_year)
    {
        if (is_null($vehicle_manufacturing_month_year)) {
            throw new \InvalidArgumentException('non-nullable vehicle_manufacturing_month_year cannot be null');
        }
        $this->container['vehicle_manufacturing_month_year'] = $vehicle_manufacturing_month_year;

        return $this;
    }

    /**
     * Gets rc_expiry_date
     *
     * @return string|null
     */
    public function getRcExpiryDate()
    {
        return $this->container['rc_expiry_date'];
    }

    /**
     * Sets rc_expiry_date
     *
     * @param string|null $rc_expiry_date It displays the date until which the registration of the vehicle is valid.
     *
     * @return self
     */
    public function setRcExpiryDate($rc_expiry_date)
    {
        if (is_null($rc_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable rc_expiry_date cannot be null');
        }
        $this->container['rc_expiry_date'] = $rc_expiry_date;

        return $this;
    }

    /**
     * Gets vehicle_tax_upto
     *
     * @return string|null
     */
    public function getVehicleTaxUpto()
    {
        return $this->container['vehicle_tax_upto'];
    }

    /**
     * Sets vehicle_tax_upto
     *
     * @param string|null $vehicle_tax_upto It displays the date until which the tax paid by the owner for the vehicle is valid.
     *
     * @return self
     */
    public function setVehicleTaxUpto($vehicle_tax_upto)
    {
        if (is_null($vehicle_tax_upto)) {
            throw new \InvalidArgumentException('non-nullable vehicle_tax_upto cannot be null');
        }
        $this->container['vehicle_tax_upto'] = $vehicle_tax_upto;

        return $this;
    }

    /**
     * Gets vehicle_insurance_company_name
     *
     * @return string|null
     */
    public function getVehicleInsuranceCompanyName()
    {
        return $this->container['vehicle_insurance_company_name'];
    }

    /**
     * Sets vehicle_insurance_company_name
     *
     * @param string|null $vehicle_insurance_company_name It displays the name of the insurance company associated with the vehicle.
     *
     * @return self
     */
    public function setVehicleInsuranceCompanyName($vehicle_insurance_company_name)
    {
        if (is_null($vehicle_insurance_company_name)) {
            throw new \InvalidArgumentException('non-nullable vehicle_insurance_company_name cannot be null');
        }
        $this->container['vehicle_insurance_company_name'] = $vehicle_insurance_company_name;

        return $this;
    }

    /**
     * Gets vehicle_insurance_upto
     *
     * @return string|null
     */
    public function getVehicleInsuranceUpto()
    {
        return $this->container['vehicle_insurance_upto'];
    }

    /**
     * Sets vehicle_insurance_upto
     *
     * @param string|null $vehicle_insurance_upto It displays the date until which the insurance paid by the owner for the vehicle is valid.
     *
     * @return self
     */
    public function setVehicleInsuranceUpto($vehicle_insurance_upto)
    {
        if (is_null($vehicle_insurance_upto)) {
            throw new \InvalidArgumentException('non-nullable vehicle_insurance_upto cannot be null');
        }
        $this->container['vehicle_insurance_upto'] = $vehicle_insurance_upto;

        return $this;
    }

    /**
     * Gets vehicle_insurance_policy_number
     *
     * @return string|null
     */
    public function getVehicleInsurancePolicyNumber()
    {
        return $this->container['vehicle_insurance_policy_number'];
    }

    /**
     * Sets vehicle_insurance_policy_number
     *
     * @param string|null $vehicle_insurance_policy_number It displays the insurance policy number of the vehicle.
     *
     * @return self
     */
    public function setVehicleInsurancePolicyNumber($vehicle_insurance_policy_number)
    {
        if (is_null($vehicle_insurance_policy_number)) {
            throw new \InvalidArgumentException('non-nullable vehicle_insurance_policy_number cannot be null');
        }
        $this->container['vehicle_insurance_policy_number'] = $vehicle_insurance_policy_number;

        return $this;
    }

    /**
     * Gets rc_financer
     *
     * @return string|null
     */
    public function getRcFinancer()
    {
        return $this->container['rc_financer'];
    }

    /**
     * Sets rc_financer
     *
     * @param string|null $rc_financer It displays the name of the financial institution or lender that provided financing for the purchase of a vehicle.
     *
     * @return self
     */
    public function setRcFinancer($rc_financer)
    {
        if (is_null($rc_financer)) {
            throw new \InvalidArgumentException('non-nullable rc_financer cannot be null');
        }
        $this->container['rc_financer'] = $rc_financer;

        return $this;
    }

    /**
     * Gets present_address
     *
     * @return string|null
     */
    public function getPresentAddress()
    {
        return $this->container['present_address'];
    }

    /**
     * Sets present_address
     *
     * @param string|null $present_address It displays the current address of the owner of the vehicle.
     *
     * @return self
     */
    public function setPresentAddress($present_address)
    {
        if (is_null($present_address)) {
            throw new \InvalidArgumentException('non-nullable present_address cannot be null');
        }
        $this->container['present_address'] = $present_address;

        return $this;
    }

    /**
     * Gets split_present_address
     *
     * @return \Cashfree\Model\SplitAddress|null
     */
    public function getSplitPresentAddress()
    {
        return $this->container['split_present_address'];
    }

    /**
     * Sets split_present_address
     *
     * @param \Cashfree\Model\SplitAddress|null $split_present_address split_present_address
     *
     * @return self
     */
    public function setSplitPresentAddress($split_present_address)
    {
        if (is_null($split_present_address)) {
            throw new \InvalidArgumentException('non-nullable split_present_address cannot be null');
        }
        $this->container['split_present_address'] = $split_present_address;

        return $this;
    }

    /**
     * Gets permanent_address
     *
     * @return string|null
     */
    public function getPermanentAddress()
    {
        return $this->container['permanent_address'];
    }

    /**
     * Sets permanent_address
     *
     * @param string|null $permanent_address It displays the permanent address of the owner of the vehicle.
     *
     * @return self
     */
    public function setPermanentAddress($permanent_address)
    {
        if (is_null($permanent_address)) {
            throw new \InvalidArgumentException('non-nullable permanent_address cannot be null');
        }
        $this->container['permanent_address'] = $permanent_address;

        return $this;
    }

    /**
     * Gets split_permanent_address
     *
     * @return \Cashfree\Model\SplitAddress|null
     */
    public function getSplitPermanentAddress()
    {
        return $this->container['split_permanent_address'];
    }

    /**
     * Sets split_permanent_address
     *
     * @param \Cashfree\Model\SplitAddress|null $split_permanent_address split_permanent_address
     *
     * @return self
     */
    public function setSplitPermanentAddress($split_permanent_address)
    {
        if (is_null($split_permanent_address)) {
            throw new \InvalidArgumentException('non-nullable split_permanent_address cannot be null');
        }
        $this->container['split_permanent_address'] = $split_permanent_address;

        return $this;
    }

    /**
     * Gets vehicle_cubic_capacity
     *
     * @return string|null
     */
    public function getVehicleCubicCapacity()
    {
        return $this->container['vehicle_cubic_capacity'];
    }

    /**
     * Sets vehicle_cubic_capacity
     *
     * @param string|null $vehicle_cubic_capacity It displays the cubic capacity of the vehicle's engine.
     *
     * @return self
     */
    public function setVehicleCubicCapacity($vehicle_cubic_capacity)
    {
        if (is_null($vehicle_cubic_capacity)) {
            throw new \InvalidArgumentException('non-nullable vehicle_cubic_capacity cannot be null');
        }
        $this->container['vehicle_cubic_capacity'] = $vehicle_cubic_capacity;

        return $this;
    }

    /**
     * Gets gross_vehicle_weight
     *
     * @return string|null
     */
    public function getGrossVehicleWeight()
    {
        return $this->container['gross_vehicle_weight'];
    }

    /**
     * Sets gross_vehicle_weight
     *
     * @param string|null $gross_vehicle_weight It displays the gross weight of the vehicle in kilograms.
     *
     * @return self
     */
    public function setGrossVehicleWeight($gross_vehicle_weight)
    {
        if (is_null($gross_vehicle_weight)) {
            throw new \InvalidArgumentException('non-nullable gross_vehicle_weight cannot be null');
        }
        $this->container['gross_vehicle_weight'] = $gross_vehicle_weight;

        return $this;
    }

    /**
     * Gets unladen_weight
     *
     * @return string|null
     */
    public function getUnladenWeight()
    {
        return $this->container['unladen_weight'];
    }

    /**
     * Sets unladen_weight
     *
     * @param string|null $unladen_weight It displays the weight of the vehicle without carrying any load in kiolgrams.
     *
     * @return self
     */
    public function setUnladenWeight($unladen_weight)
    {
        if (is_null($unladen_weight)) {
            throw new \InvalidArgumentException('non-nullable unladen_weight cannot be null');
        }
        $this->container['unladen_weight'] = $unladen_weight;

        return $this;
    }

    /**
     * Gets vehicle_category
     *
     * @return string|null
     */
    public function getVehicleCategory()
    {
        return $this->container['vehicle_category'];
    }

    /**
     * Sets vehicle_category
     *
     * @param string|null $vehicle_category It displays the category of the vehicle.
     *
     * @return self
     */
    public function setVehicleCategory($vehicle_category)
    {
        if (is_null($vehicle_category)) {
            throw new \InvalidArgumentException('non-nullable vehicle_category cannot be null');
        }
        $this->container['vehicle_category'] = $vehicle_category;

        return $this;
    }

    /**
     * Gets rc_standard_cap
     *
     * @return string|null
     */
    public function getRcStandardCap()
    {
        return $this->container['rc_standard_cap'];
    }

    /**
     * Sets rc_standard_cap
     *
     * @param string|null $rc_standard_cap rc_standard_cap
     *
     * @return self
     */
    public function setRcStandardCap($rc_standard_cap)
    {
        if (is_null($rc_standard_cap)) {
            throw new \InvalidArgumentException('non-nullable rc_standard_cap cannot be null');
        }
        $this->container['rc_standard_cap'] = $rc_standard_cap;

        return $this;
    }

    /**
     * Gets vehicle_cylinders_no
     *
     * @return string|null
     */
    public function getVehicleCylindersNo()
    {
        return $this->container['vehicle_cylinders_no'];
    }

    /**
     * Sets vehicle_cylinders_no
     *
     * @param string|null $vehicle_cylinders_no It displays the number of cylinders present in the vehicle.
     *
     * @return self
     */
    public function setVehicleCylindersNo($vehicle_cylinders_no)
    {
        if (is_null($vehicle_cylinders_no)) {
            throw new \InvalidArgumentException('non-nullable vehicle_cylinders_no cannot be null');
        }
        $this->container['vehicle_cylinders_no'] = $vehicle_cylinders_no;

        return $this;
    }

    /**
     * Gets vehicle_seat_capacity
     *
     * @return string|null
     */
    public function getVehicleSeatCapacity()
    {
        return $this->container['vehicle_seat_capacity'];
    }

    /**
     * Sets vehicle_seat_capacity
     *
     * @param string|null $vehicle_seat_capacity It displays the number of seats in the vehicle.
     *
     * @return self
     */
    public function setVehicleSeatCapacity($vehicle_seat_capacity)
    {
        if (is_null($vehicle_seat_capacity)) {
            throw new \InvalidArgumentException('non-nullable vehicle_seat_capacity cannot be null');
        }
        $this->container['vehicle_seat_capacity'] = $vehicle_seat_capacity;

        return $this;
    }

    /**
     * Gets vehicle_sleeper_capacity
     *
     * @return string|null
     */
    public function getVehicleSleeperCapacity()
    {
        return $this->container['vehicle_sleeper_capacity'];
    }

    /**
     * Sets vehicle_sleeper_capacity
     *
     * @param string|null $vehicle_sleeper_capacity It displays the number of beds available in the vehicle.
     *
     * @return self
     */
    public function setVehicleSleeperCapacity($vehicle_sleeper_capacity)
    {
        if (is_null($vehicle_sleeper_capacity)) {
            throw new \InvalidArgumentException('non-nullable vehicle_sleeper_capacity cannot be null');
        }
        $this->container['vehicle_sleeper_capacity'] = $vehicle_sleeper_capacity;

        return $this;
    }

    /**
     * Gets vehicle_standing_capacity
     *
     * @return string|null
     */
    public function getVehicleStandingCapacity()
    {
        return $this->container['vehicle_standing_capacity'];
    }

    /**
     * Sets vehicle_standing_capacity
     *
     * @param string|null $vehicle_standing_capacity It displays the number of people that can stand in the vehicle.
     *
     * @return self
     */
    public function setVehicleStandingCapacity($vehicle_standing_capacity)
    {
        if (is_null($vehicle_standing_capacity)) {
            throw new \InvalidArgumentException('non-nullable vehicle_standing_capacity cannot be null');
        }
        $this->container['vehicle_standing_capacity'] = $vehicle_standing_capacity;

        return $this;
    }

    /**
     * Gets wheelbase
     *
     * @return string|null
     */
    public function getWheelbase()
    {
        return $this->container['wheelbase'];
    }

    /**
     * Sets wheelbase
     *
     * @param string|null $wheelbase It displays distance between the front and rear axles of a vehicle in mm.
     *
     * @return self
     */
    public function setWheelbase($wheelbase)
    {
        if (is_null($wheelbase)) {
            throw new \InvalidArgumentException('non-nullable wheelbase cannot be null');
        }
        $this->container['wheelbase'] = $wheelbase;

        return $this;
    }

    /**
     * Gets vehicle_number
     *
     * @return string|null
     */
    public function getVehicleNumber()
    {
        return $this->container['vehicle_number'];
    }

    /**
     * Sets vehicle_number
     *
     * @param string|null $vehicle_number It displays the registration number of the vehicle.
     *
     * @return self
     */
    public function setVehicleNumber($vehicle_number)
    {
        if (is_null($vehicle_number)) {
            throw new \InvalidArgumentException('non-nullable vehicle_number cannot be null');
        }
        $this->container['vehicle_number'] = $vehicle_number;

        return $this;
    }

    /**
     * Gets pucc_number
     *
     * @return string|null
     */
    public function getPuccNumber()
    {
        return $this->container['pucc_number'];
    }

    /**
     * Sets pucc_number
     *
     * @param string|null $pucc_number It displays the Pollution Under Control Certificate (PUCC) number associated with vehicle.
     *
     * @return self
     */
    public function setPuccNumber($pucc_number)
    {
        if (is_null($pucc_number)) {
            throw new \InvalidArgumentException('non-nullable pucc_number cannot be null');
        }
        $this->container['pucc_number'] = $pucc_number;

        return $this;
    }

    /**
     * Gets pucc_upto
     *
     * @return string|null
     */
    public function getPuccUpto()
    {
        return $this->container['pucc_upto'];
    }

    /**
     * Sets pucc_upto
     *
     * @param string|null $pucc_upto It displays till when the PUCC number is valid.
     *
     * @return self
     */
    public function setPuccUpto($pucc_upto)
    {
        if (is_null($pucc_upto)) {
            throw new \InvalidArgumentException('non-nullable pucc_upto cannot be null');
        }
        $this->container['pucc_upto'] = $pucc_upto;

        return $this;
    }

    /**
     * Gets blacklist_status
     *
     * @return string|null
     */
    public function getBlacklistStatus()
    {
        return $this->container['blacklist_status'];
    }

    /**
     * Sets blacklist_status
     *
     * @param string|null $blacklist_status It displays whether the vehicle is blacklisted.
     *
     * @return self
     */
    public function setBlacklistStatus($blacklist_status)
    {
        if (is_null($blacklist_status)) {
            throw new \InvalidArgumentException('non-nullable blacklist_status cannot be null');
        }
        $this->container['blacklist_status'] = $blacklist_status;

        return $this;
    }

    /**
     * Gets blacklist_details
     *
     * @return object|null
     */
    public function getBlacklistDetails()
    {
        return $this->container['blacklist_details'];
    }

    /**
     * Sets blacklist_details
     *
     * @param object|null $blacklist_details It displays the reasons for blacklisting the vehicle.
     *
     * @return self
     */
    public function setBlacklistDetails($blacklist_details)
    {
        if (is_null($blacklist_details)) {
            throw new \InvalidArgumentException('non-nullable blacklist_details cannot be null');
        }
        $this->container['blacklist_details'] = $blacklist_details;

        return $this;
    }

    /**
     * Gets challan_details
     *
     * @return object|null
     */
    public function getChallanDetails()
    {
        return $this->container['challan_details'];
    }

    /**
     * Sets challan_details
     *
     * @param object|null $challan_details It displays traffic tickets or citations issued by traffic police or authorities for various traffic violations.
     *
     * @return self
     */
    public function setChallanDetails($challan_details)
    {
        if (is_null($challan_details)) {
            throw new \InvalidArgumentException('non-nullable challan_details cannot be null');
        }
        $this->container['challan_details'] = $challan_details;

        return $this;
    }

    /**
     * Gets permit_issue_date
     *
     * @return string|null
     */
    public function getPermitIssueDate()
    {
        return $this->container['permit_issue_date'];
    }

    /**
     * Sets permit_issue_date
     *
     * @param string|null $permit_issue_date It displays when the relevant authorities granted permission or authorisation for a specific type of permit associated with the vehicle.
     *
     * @return self
     */
    public function setPermitIssueDate($permit_issue_date)
    {
        if (is_null($permit_issue_date)) {
            throw new \InvalidArgumentException('non-nullable permit_issue_date cannot be null');
        }
        $this->container['permit_issue_date'] = $permit_issue_date;

        return $this;
    }

    /**
     * Gets permit_number
     *
     * @return string|null
     */
    public function getPermitNumber()
    {
        return $this->container['permit_number'];
    }

    /**
     * Sets permit_number
     *
     * @param string|null $permit_number It displays the permit number of the vehicle.
     *
     * @return self
     */
    public function setPermitNumber($permit_number)
    {
        if (is_null($permit_number)) {
            throw new \InvalidArgumentException('non-nullable permit_number cannot be null');
        }
        $this->container['permit_number'] = $permit_number;

        return $this;
    }

    /**
     * Gets permit_type
     *
     * @return string|null
     */
    public function getPermitType()
    {
        return $this->container['permit_type'];
    }

    /**
     * Sets permit_type
     *
     * @param string|null $permit_type It displays the type of permit issued to the vehicle.
     *
     * @return self
     */
    public function setPermitType($permit_type)
    {
        if (is_null($permit_type)) {
            throw new \InvalidArgumentException('non-nullable permit_type cannot be null');
        }
        $this->container['permit_type'] = $permit_type;

        return $this;
    }

    /**
     * Gets permit_valid_from
     *
     * @return string|null
     */
    public function getPermitValidFrom()
    {
        return $this->container['permit_valid_from'];
    }

    /**
     * Sets permit_valid_from
     *
     * @param string|null $permit_valid_from It displays the beginning date of the issuance of permit.
     *
     * @return self
     */
    public function setPermitValidFrom($permit_valid_from)
    {
        if (is_null($permit_valid_from)) {
            throw new \InvalidArgumentException('non-nullable permit_valid_from cannot be null');
        }
        $this->container['permit_valid_from'] = $permit_valid_from;

        return $this;
    }

    /**
     * Gets permit_valid_upto
     *
     * @return string|null
     */
    public function getPermitValidUpto()
    {
        return $this->container['permit_valid_upto'];
    }

    /**
     * Sets permit_valid_upto
     *
     * @param string|null $permit_valid_upto It displays the end date of the permit.
     *
     * @return self
     */
    public function setPermitValidUpto($permit_valid_upto)
    {
        if (is_null($permit_valid_upto)) {
            throw new \InvalidArgumentException('non-nullable permit_valid_upto cannot be null');
        }
        $this->container['permit_valid_upto'] = $permit_valid_upto;

        return $this;
    }

    /**
     * Gets non_use_status
     *
     * @return string|null
     */
    public function getNonUseStatus()
    {
        return $this->container['non_use_status'];
    }

    /**
     * Sets non_use_status
     *
     * @param string|null $non_use_status It displays whether the vehicle owner or registrant declared that the vehicle is not in use for a certain period.
     *
     * @return self
     */
    public function setNonUseStatus($non_use_status)
    {
        if (is_null($non_use_status)) {
            throw new \InvalidArgumentException('non-nullable non_use_status cannot be null');
        }
        $this->container['non_use_status'] = $non_use_status;

        return $this;
    }

    /**
     * Gets non_use_from
     *
     * @return string|null
     */
    public function getNonUseFrom()
    {
        return $this->container['non_use_from'];
    }

    /**
     * Sets non_use_from
     *
     * @param string|null $non_use_from It displays the beginning date of the non use period.
     *
     * @return self
     */
    public function setNonUseFrom($non_use_from)
    {
        if (is_null($non_use_from)) {
            throw new \InvalidArgumentException('non-nullable non_use_from cannot be null');
        }
        $this->container['non_use_from'] = $non_use_from;

        return $this;
    }

    /**
     * Gets non_use_to
     *
     * @return string|null
     */
    public function getNonUseTo()
    {
        return $this->container['non_use_to'];
    }

    /**
     * Sets non_use_to
     *
     * @param string|null $non_use_to It displays the end date of the non use period.
     *
     * @return self
     */
    public function setNonUseTo($non_use_to)
    {
        if (is_null($non_use_to)) {
            throw new \InvalidArgumentException('non-nullable non_use_to cannot be null');
        }
        $this->container['non_use_to'] = $non_use_to;

        return $this;
    }

    /**
     * Gets national_permit_number
     *
     * @return string|null
     */
    public function getNationalPermitNumber()
    {
        return $this->container['national_permit_number'];
    }

    /**
     * Sets national_permit_number
     *
     * @param string|null $national_permit_number It displays the permit issued to the vehicle to go outside the home state carrying goods.
     *
     * @return self
     */
    public function setNationalPermitNumber($national_permit_number)
    {
        if (is_null($national_permit_number)) {
            throw new \InvalidArgumentException('non-nullable national_permit_number cannot be null');
        }
        $this->container['national_permit_number'] = $national_permit_number;

        return $this;
    }

    /**
     * Gets national_permit_upto
     *
     * @return string|null
     */
    public function getNationalPermitUpto()
    {
        return $this->container['national_permit_upto'];
    }

    /**
     * Sets national_permit_upto
     *
     * @param string|null $national_permit_upto It displays the end date of the permit issued to the vechicle to go outside the home state carrying goods.
     *
     * @return self
     */
    public function setNationalPermitUpto($national_permit_upto)
    {
        if (is_null($national_permit_upto)) {
            throw new \InvalidArgumentException('non-nullable national_permit_upto cannot be null');
        }
        $this->container['national_permit_upto'] = $national_permit_upto;

        return $this;
    }

    /**
     * Gets national_permit_issued_by
     *
     * @return string|null
     */
    public function getNationalPermitIssuedBy()
    {
        return $this->container['national_permit_issued_by'];
    }

    /**
     * Sets national_permit_issued_by
     *
     * @param string|null $national_permit_issued_by It displays the national permit issuer's name.
     *
     * @return self
     */
    public function setNationalPermitIssuedBy($national_permit_issued_by)
    {
        if (is_null($national_permit_issued_by)) {
            throw new \InvalidArgumentException('non-nullable national_permit_issued_by cannot be null');
        }
        $this->container['national_permit_issued_by'] = $national_permit_issued_by;

        return $this;
    }

    /**
     * Gets is_commercial
     *
     * @return bool|null
     */
    public function getIsCommercial()
    {
        return $this->container['is_commercial'];
    }

    /**
     * Sets is_commercial
     *
     * @param bool|null $is_commercial It displays whether the vehicle is for commercial purpose.
     *
     * @return self
     */
    public function setIsCommercial($is_commercial)
    {
        if (is_null($is_commercial)) {
            throw new \InvalidArgumentException('non-nullable is_commercial cannot be null');
        }
        $this->container['is_commercial'] = $is_commercial;

        return $this;
    }

    /**
     * Gets noc_details
     *
     * @return string|null
     */
    public function getNocDetails()
    {
        return $this->container['noc_details'];
    }

    /**
     * Sets noc_details
     *
     * @param string|null $noc_details It displays the details of the no objection certificate.
     *
     * @return self
     */
    public function setNocDetails($noc_details)
    {
        if (is_null($noc_details)) {
            throw new \InvalidArgumentException('non-nullable noc_details cannot be null');
        }
        $this->container['noc_details'] = $noc_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


