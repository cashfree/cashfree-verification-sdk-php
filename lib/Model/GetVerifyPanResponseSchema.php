<?php
/**
 * GetVerifyPanResponseSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree\Model;

use \ArrayAccess;
use \Cashfree\ObjectSerializer;

/**
 * GetVerifyPanResponseSchema Class Doc Comment
 *
 * @category Class
 * @description Success response for Verify PAN Sync API
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetVerifyPanResponseSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetVerifyPanResponseSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pan' => 'string',
        'type' => 'string',
        'reference_id' => 'int',
        'name_provided' => 'string',
        'registered_name' => 'string',
        'valid' => 'bool',
        'father_name' => 'string',
        'message' => 'string',
        'name_match_score' => 'string',
        'name_match_result' => 'string',
        'aadhaar_seeding_status' => 'string',
        'last_updated_at' => 'string',
        'name_pan_card' => 'string',
        'pan_status' => 'string',
        'aadhaar_seeding_status_desc' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pan' => null,
        'type' => null,
        'reference_id' => 'int64',
        'name_provided' => null,
        'registered_name' => null,
        'valid' => null,
        'father_name' => null,
        'message' => null,
        'name_match_score' => null,
        'name_match_result' => null,
        'aadhaar_seeding_status' => null,
        'last_updated_at' => null,
        'name_pan_card' => null,
        'pan_status' => null,
        'aadhaar_seeding_status_desc' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'pan' => false,
		'type' => false,
		'reference_id' => false,
		'name_provided' => false,
		'registered_name' => false,
		'valid' => false,
		'father_name' => false,
		'message' => false,
		'name_match_score' => false,
		'name_match_result' => false,
		'aadhaar_seeding_status' => false,
		'last_updated_at' => false,
		'name_pan_card' => false,
		'pan_status' => false,
		'aadhaar_seeding_status_desc' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pan' => 'pan',
        'type' => 'type',
        'reference_id' => 'reference_id',
        'name_provided' => 'name_provided',
        'registered_name' => 'registered_name',
        'valid' => 'valid',
        'father_name' => 'father_name',
        'message' => 'message',
        'name_match_score' => 'name_match_score',
        'name_match_result' => 'name_match_result',
        'aadhaar_seeding_status' => 'aadhaar_seeding_status',
        'last_updated_at' => 'last_updated_at',
        'name_pan_card' => 'name_pan_card',
        'pan_status' => 'pan_status',
        'aadhaar_seeding_status_desc' => 'aadhaar_seeding_status_desc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pan' => 'setPan',
        'type' => 'setType',
        'reference_id' => 'setReferenceId',
        'name_provided' => 'setNameProvided',
        'registered_name' => 'setRegisteredName',
        'valid' => 'setValid',
        'father_name' => 'setFatherName',
        'message' => 'setMessage',
        'name_match_score' => 'setNameMatchScore',
        'name_match_result' => 'setNameMatchResult',
        'aadhaar_seeding_status' => 'setAadhaarSeedingStatus',
        'last_updated_at' => 'setLastUpdatedAt',
        'name_pan_card' => 'setNamePanCard',
        'pan_status' => 'setPanStatus',
        'aadhaar_seeding_status_desc' => 'setAadhaarSeedingStatusDesc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pan' => 'getPan',
        'type' => 'getType',
        'reference_id' => 'getReferenceId',
        'name_provided' => 'getNameProvided',
        'registered_name' => 'getRegisteredName',
        'valid' => 'getValid',
        'father_name' => 'getFatherName',
        'message' => 'getMessage',
        'name_match_score' => 'getNameMatchScore',
        'name_match_result' => 'getNameMatchResult',
        'aadhaar_seeding_status' => 'getAadhaarSeedingStatus',
        'last_updated_at' => 'getLastUpdatedAt',
        'name_pan_card' => 'getNamePanCard',
        'pan_status' => 'getPanStatus',
        'aadhaar_seeding_status_desc' => 'getAadhaarSeedingStatusDesc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pan', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('reference_id', $data ?? [], null);
        $this->setIfExists('name_provided', $data ?? [], null);
        $this->setIfExists('registered_name', $data ?? [], null);
        $this->setIfExists('valid', $data ?? [], null);
        $this->setIfExists('father_name', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('name_match_score', $data ?? [], null);
        $this->setIfExists('name_match_result', $data ?? [], null);
        $this->setIfExists('aadhaar_seeding_status', $data ?? [], null);
        $this->setIfExists('last_updated_at', $data ?? [], null);
        $this->setIfExists('name_pan_card', $data ?? [], null);
        $this->setIfExists('pan_status', $data ?? [], null);
        $this->setIfExists('aadhaar_seeding_status_desc', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pan
     *
     * @return string|null
     */
    public function getPan()
    {
        return $this->container['pan'];
    }

    /**
     * Sets pan
     *
     * @param string|null $pan It displays the unique 10-character alphanumeric identifier issued by the Income Tax Department.
     *
     * @return self
     */
    public function setPan($pan)
    {
        if (is_null($pan)) {
            throw new \InvalidArgumentException('non-nullable pan cannot be null');
        }
        $this->container['pan'] = $pan;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type It displays the type of the PAN issued.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return int|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param int|null $reference_id It displays the unique ID created by Cashfree Payments for reference purposes.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (is_null($reference_id)) {
            throw new \InvalidArgumentException('non-nullable reference_id cannot be null');
        }
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets name_provided
     *
     * @return string|null
     */
    public function getNameProvided()
    {
        return $this->container['name_provided'];
    }

    /**
     * Sets name_provided
     *
     * @param string|null $name_provided It displays the name entered in the API request.
     *
     * @return self
     */
    public function setNameProvided($name_provided)
    {
        if (is_null($name_provided)) {
            throw new \InvalidArgumentException('non-nullable name_provided cannot be null');
        }
        $this->container['name_provided'] = $name_provided;

        return $this;
    }

    /**
     * Gets registered_name
     *
     * @return string|null
     */
    public function getRegisteredName()
    {
        return $this->container['registered_name'];
    }

    /**
     * Sets registered_name
     *
     * @param string|null $registered_name It displays the PAN registered name.
     *
     * @return self
     */
    public function setRegisteredName($registered_name)
    {
        if (is_null($registered_name)) {
            throw new \InvalidArgumentException('non-nullable registered_name cannot be null');
        }
        $this->container['registered_name'] = $registered_name;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool|null
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool|null $valid It displays the status of the PAN card.
     *
     * @return self
     */
    public function setValid($valid)
    {
        if (is_null($valid)) {
            throw new \InvalidArgumentException('non-nullable valid cannot be null');
        }
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets father_name
     *
     * @return string|null
     */
    public function getFatherName()
    {
        return $this->container['father_name'];
    }

    /**
     * Sets father_name
     *
     * @param string|null $father_name It displays the father's name of the PAN card holder.
     *
     * @return self
     */
    public function setFatherName($father_name)
    {
        if (is_null($father_name)) {
            throw new \InvalidArgumentException('non-nullable father_name cannot be null');
        }
        $this->container['father_name'] = $father_name;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message It displays details about the success or failure of the API request.
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets name_match_score
     *
     * @return string|null
     */
    public function getNameMatchScore()
    {
        return $this->container['name_match_score'];
    }

    /**
     * Sets name_match_score
     *
     * @param string|null $name_match_score It displays the score for the name match verification.
     *
     * @return self
     */
    public function setNameMatchScore($name_match_score)
    {
        if (is_null($name_match_score)) {
            throw new \InvalidArgumentException('non-nullable name_match_score cannot be null');
        }
        $this->container['name_match_score'] = $name_match_score;

        return $this;
    }

    /**
     * Gets name_match_result
     *
     * @return string|null
     */
    public function getNameMatchResult()
    {
        return $this->container['name_match_result'];
    }

    /**
     * Sets name_match_result
     *
     * @param string|null $name_match_result It displays the result of the name match verification.
     *
     * @return self
     */
    public function setNameMatchResult($name_match_result)
    {
        if (is_null($name_match_result)) {
            throw new \InvalidArgumentException('non-nullable name_match_result cannot be null');
        }
        $this->container['name_match_result'] = $name_match_result;

        return $this;
    }

    /**
     * Gets aadhaar_seeding_status
     *
     * @return string|null
     */
    public function getAadhaarSeedingStatus()
    {
        return $this->container['aadhaar_seeding_status'];
    }

    /**
     * Sets aadhaar_seeding_status
     *
     * @param string|null $aadhaar_seeding_status It displays whether the individual linked the aadhaar information with PAN.
     *
     * @return self
     */
    public function setAadhaarSeedingStatus($aadhaar_seeding_status)
    {
        if (is_null($aadhaar_seeding_status)) {
            throw new \InvalidArgumentException('non-nullable aadhaar_seeding_status cannot be null');
        }
        $this->container['aadhaar_seeding_status'] = $aadhaar_seeding_status;

        return $this;
    }

    /**
     * Gets last_updated_at
     *
     * @return string|null
     */
    public function getLastUpdatedAt()
    {
        return $this->container['last_updated_at'];
    }

    /**
     * Sets last_updated_at
     *
     * @param string|null $last_updated_at It displays the last updated date.
     *
     * @return self
     */
    public function setLastUpdatedAt($last_updated_at)
    {
        if (is_null($last_updated_at)) {
            throw new \InvalidArgumentException('non-nullable last_updated_at cannot be null');
        }
        $this->container['last_updated_at'] = $last_updated_at;

        return $this;
    }

    /**
     * Gets name_pan_card
     *
     * @return string|null
     */
    public function getNamePanCard()
    {
        return $this->container['name_pan_card'];
    }

    /**
     * Sets name_pan_card
     *
     * @param string|null $name_pan_card It displays the name displayed on the PAN card.
     *
     * @return self
     */
    public function setNamePanCard($name_pan_card)
    {
        if (is_null($name_pan_card)) {
            throw new \InvalidArgumentException('non-nullable name_pan_card cannot be null');
        }
        $this->container['name_pan_card'] = $name_pan_card;

        return $this;
    }

    /**
     * Gets pan_status
     *
     * @return string|null
     */
    public function getPanStatus()
    {
        return $this->container['pan_status'];
    }

    /**
     * Sets pan_status
     *
     * @param string|null $pan_status It displays the status of the PAN card.
     *
     * @return self
     */
    public function setPanStatus($pan_status)
    {
        if (is_null($pan_status)) {
            throw new \InvalidArgumentException('non-nullable pan_status cannot be null');
        }
        $this->container['pan_status'] = $pan_status;

        return $this;
    }

    /**
     * Gets aadhaar_seeding_status_desc
     *
     * @return string|null
     */
    public function getAadhaarSeedingStatusDesc()
    {
        return $this->container['aadhaar_seeding_status_desc'];
    }

    /**
     * Sets aadhaar_seeding_status_desc
     *
     * @param string|null $aadhaar_seeding_status_desc It displays additional information of the linking of aadhaar and PAN card.
     *
     * @return self
     */
    public function setAadhaarSeedingStatusDesc($aadhaar_seeding_status_desc)
    {
        if (is_null($aadhaar_seeding_status_desc)) {
            throw new \InvalidArgumentException('non-nullable aadhaar_seeding_status_desc cannot be null');
        }
        $this->container['aadhaar_seeding_status_desc'] = $aadhaar_seeding_status_desc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


