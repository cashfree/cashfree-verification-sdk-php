<?php
/**
 * GstinResponseSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree\Model;

use \ArrayAccess;
use \Cashfree\ObjectSerializer;

/**
 * GstinResponseSchema Class Doc Comment
 *
 * @category Class
 * @description Success response for Verify GSTIN
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GstinResponseSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GstinResponseSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gstin' => 'string',
        'additional_address_array' => '\Cashfree\Model\GstinResponseSchemaAdditionalAddressArrayInner[]',
        'cancellation_date' => 'string',
        'center_jurisdiction' => 'string',
        'constitution_of_business' => 'string',
        'date_of_registration' => 'string',
        'gst_in_status' => 'string',
        'last_update_date' => 'string',
        'legal_name_of_business' => 'string',
        'message' => 'string',
        'nature_of_business_activities' => 'string[]',
        'principal_place_address' => 'string',
        'reference_id' => 'int',
        'state_jurisdiction' => 'string',
        'status_code' => 'string',
        'taxpayer_type' => 'string',
        'valid' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gstin' => null,
        'additional_address_array' => null,
        'cancellation_date' => null,
        'center_jurisdiction' => null,
        'constitution_of_business' => null,
        'date_of_registration' => null,
        'gst_in_status' => null,
        'last_update_date' => null,
        'legal_name_of_business' => null,
        'message' => null,
        'nature_of_business_activities' => null,
        'principal_place_address' => null,
        'reference_id' => 'int64',
        'state_jurisdiction' => null,
        'status_code' => null,
        'taxpayer_type' => null,
        'valid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'gstin' => false,
		'additional_address_array' => false,
		'cancellation_date' => false,
		'center_jurisdiction' => false,
		'constitution_of_business' => false,
		'date_of_registration' => false,
		'gst_in_status' => false,
		'last_update_date' => false,
		'legal_name_of_business' => false,
		'message' => false,
		'nature_of_business_activities' => false,
		'principal_place_address' => false,
		'reference_id' => false,
		'state_jurisdiction' => false,
		'status_code' => false,
		'taxpayer_type' => false,
		'valid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gstin' => 'GSTIN',
        'additional_address_array' => 'additional_address_array',
        'cancellation_date' => 'cancellation_date',
        'center_jurisdiction' => 'center_jurisdiction',
        'constitution_of_business' => 'constitution_of_business',
        'date_of_registration' => 'date_of_registration',
        'gst_in_status' => 'gst_in_status',
        'last_update_date' => 'last_update_date',
        'legal_name_of_business' => 'legal_name_of_business',
        'message' => 'message',
        'nature_of_business_activities' => 'nature_of_business_activities',
        'principal_place_address' => 'principal_place_address',
        'reference_id' => 'reference_id',
        'state_jurisdiction' => 'state_jurisdiction',
        'status_code' => 'status_code',
        'taxpayer_type' => 'taxpayer_type',
        'valid' => 'valid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gstin' => 'setGstin',
        'additional_address_array' => 'setAdditionalAddressArray',
        'cancellation_date' => 'setCancellationDate',
        'center_jurisdiction' => 'setCenterJurisdiction',
        'constitution_of_business' => 'setConstitutionOfBusiness',
        'date_of_registration' => 'setDateOfRegistration',
        'gst_in_status' => 'setGstInStatus',
        'last_update_date' => 'setLastUpdateDate',
        'legal_name_of_business' => 'setLegalNameOfBusiness',
        'message' => 'setMessage',
        'nature_of_business_activities' => 'setNatureOfBusinessActivities',
        'principal_place_address' => 'setPrincipalPlaceAddress',
        'reference_id' => 'setReferenceId',
        'state_jurisdiction' => 'setStateJurisdiction',
        'status_code' => 'setStatusCode',
        'taxpayer_type' => 'setTaxpayerType',
        'valid' => 'setValid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gstin' => 'getGstin',
        'additional_address_array' => 'getAdditionalAddressArray',
        'cancellation_date' => 'getCancellationDate',
        'center_jurisdiction' => 'getCenterJurisdiction',
        'constitution_of_business' => 'getConstitutionOfBusiness',
        'date_of_registration' => 'getDateOfRegistration',
        'gst_in_status' => 'getGstInStatus',
        'last_update_date' => 'getLastUpdateDate',
        'legal_name_of_business' => 'getLegalNameOfBusiness',
        'message' => 'getMessage',
        'nature_of_business_activities' => 'getNatureOfBusinessActivities',
        'principal_place_address' => 'getPrincipalPlaceAddress',
        'reference_id' => 'getReferenceId',
        'state_jurisdiction' => 'getStateJurisdiction',
        'status_code' => 'getStatusCode',
        'taxpayer_type' => 'getTaxpayerType',
        'valid' => 'getValid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('gstin', $data ?? [], null);
        $this->setIfExists('additional_address_array', $data ?? [], null);
        $this->setIfExists('cancellation_date', $data ?? [], null);
        $this->setIfExists('center_jurisdiction', $data ?? [], null);
        $this->setIfExists('constitution_of_business', $data ?? [], null);
        $this->setIfExists('date_of_registration', $data ?? [], null);
        $this->setIfExists('gst_in_status', $data ?? [], null);
        $this->setIfExists('last_update_date', $data ?? [], null);
        $this->setIfExists('legal_name_of_business', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('nature_of_business_activities', $data ?? [], null);
        $this->setIfExists('principal_place_address', $data ?? [], null);
        $this->setIfExists('reference_id', $data ?? [], null);
        $this->setIfExists('state_jurisdiction', $data ?? [], null);
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('taxpayer_type', $data ?? [], null);
        $this->setIfExists('valid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['additional_address_array']) && (count($this->container['additional_address_array']) < 1)) {
            $invalidProperties[] = "invalid value for 'additional_address_array', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gstin
     *
     * @return string|null
     */
    public function getGstin()
    {
        return $this->container['gstin'];
    }

    /**
     * Sets gstin
     *
     * @param string|null $gstin It displays the unique identification number assigned to business registered under the Goods and Services Tax (GST) system in India.\"
     *
     * @return self
     */
    public function setGstin($gstin)
    {
        if (is_null($gstin)) {
            throw new \InvalidArgumentException('non-nullable gstin cannot be null');
        }
        $this->container['gstin'] = $gstin;

        return $this;
    }

    /**
     * Gets additional_address_array
     *
     * @return \Cashfree\Model\GstinResponseSchemaAdditionalAddressArrayInner[]|null
     */
    public function getAdditionalAddressArray()
    {
        return $this->container['additional_address_array'];
    }

    /**
     * Sets additional_address_array
     *
     * @param \Cashfree\Model\GstinResponseSchemaAdditionalAddressArrayInner[]|null $additional_address_array additional_address_array
     *
     * @return self
     */
    public function setAdditionalAddressArray($additional_address_array)
    {
        if (is_null($additional_address_array)) {
            throw new \InvalidArgumentException('non-nullable additional_address_array cannot be null');
        }


        if ((count($additional_address_array) < 1)) {
            throw new \InvalidArgumentException('invalid length for $additional_address_array when calling GstinResponseSchema., number of items must be greater than or equal to 1.');
        }
        $this->container['additional_address_array'] = $additional_address_array;

        return $this;
    }

    /**
     * Gets cancellation_date
     *
     * @return string|null
     */
    public function getCancellationDate()
    {
        return $this->container['cancellation_date'];
    }

    /**
     * Sets cancellation_date
     *
     * @param string|null $cancellation_date cancellation_date
     *
     * @return self
     */
    public function setCancellationDate($cancellation_date)
    {
        if (is_null($cancellation_date)) {
            throw new \InvalidArgumentException('non-nullable cancellation_date cannot be null');
        }
        $this->container['cancellation_date'] = $cancellation_date;

        return $this;
    }

    /**
     * Gets center_jurisdiction
     *
     * @return string|null
     */
    public function getCenterJurisdiction()
    {
        return $this->container['center_jurisdiction'];
    }

    /**
     * Sets center_jurisdiction
     *
     * @param string|null $center_jurisdiction center_jurisdiction
     *
     * @return self
     */
    public function setCenterJurisdiction($center_jurisdiction)
    {
        if (is_null($center_jurisdiction)) {
            throw new \InvalidArgumentException('non-nullable center_jurisdiction cannot be null');
        }
        $this->container['center_jurisdiction'] = $center_jurisdiction;

        return $this;
    }

    /**
     * Gets constitution_of_business
     *
     * @return string|null
     */
    public function getConstitutionOfBusiness()
    {
        return $this->container['constitution_of_business'];
    }

    /**
     * Sets constitution_of_business
     *
     * @param string|null $constitution_of_business constitution_of_business
     *
     * @return self
     */
    public function setConstitutionOfBusiness($constitution_of_business)
    {
        if (is_null($constitution_of_business)) {
            throw new \InvalidArgumentException('non-nullable constitution_of_business cannot be null');
        }
        $this->container['constitution_of_business'] = $constitution_of_business;

        return $this;
    }

    /**
     * Gets date_of_registration
     *
     * @return string|null
     */
    public function getDateOfRegistration()
    {
        return $this->container['date_of_registration'];
    }

    /**
     * Sets date_of_registration
     *
     * @param string|null $date_of_registration date_of_registration
     *
     * @return self
     */
    public function setDateOfRegistration($date_of_registration)
    {
        if (is_null($date_of_registration)) {
            throw new \InvalidArgumentException('non-nullable date_of_registration cannot be null');
        }
        $this->container['date_of_registration'] = $date_of_registration;

        return $this;
    }

    /**
     * Gets gst_in_status
     *
     * @return string|null
     */
    public function getGstInStatus()
    {
        return $this->container['gst_in_status'];
    }

    /**
     * Sets gst_in_status
     *
     * @param string|null $gst_in_status gst_in_status
     *
     * @return self
     */
    public function setGstInStatus($gst_in_status)
    {
        if (is_null($gst_in_status)) {
            throw new \InvalidArgumentException('non-nullable gst_in_status cannot be null');
        }
        $this->container['gst_in_status'] = $gst_in_status;

        return $this;
    }

    /**
     * Gets last_update_date
     *
     * @return string|null
     */
    public function getLastUpdateDate()
    {
        return $this->container['last_update_date'];
    }

    /**
     * Sets last_update_date
     *
     * @param string|null $last_update_date last_update_date
     *
     * @return self
     */
    public function setLastUpdateDate($last_update_date)
    {
        if (is_null($last_update_date)) {
            throw new \InvalidArgumentException('non-nullable last_update_date cannot be null');
        }
        $this->container['last_update_date'] = $last_update_date;

        return $this;
    }

    /**
     * Gets legal_name_of_business
     *
     * @return string|null
     */
    public function getLegalNameOfBusiness()
    {
        return $this->container['legal_name_of_business'];
    }

    /**
     * Sets legal_name_of_business
     *
     * @param string|null $legal_name_of_business legal_name_of_business
     *
     * @return self
     */
    public function setLegalNameOfBusiness($legal_name_of_business)
    {
        if (is_null($legal_name_of_business)) {
            throw new \InvalidArgumentException('non-nullable legal_name_of_business cannot be null');
        }
        $this->container['legal_name_of_business'] = $legal_name_of_business;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets nature_of_business_activities
     *
     * @return string[]|null
     */
    public function getNatureOfBusinessActivities()
    {
        return $this->container['nature_of_business_activities'];
    }

    /**
     * Sets nature_of_business_activities
     *
     * @param string[]|null $nature_of_business_activities nature_of_business_activities
     *
     * @return self
     */
    public function setNatureOfBusinessActivities($nature_of_business_activities)
    {
        if (is_null($nature_of_business_activities)) {
            throw new \InvalidArgumentException('non-nullable nature_of_business_activities cannot be null');
        }
        $this->container['nature_of_business_activities'] = $nature_of_business_activities;

        return $this;
    }

    /**
     * Gets principal_place_address
     *
     * @return string|null
     */
    public function getPrincipalPlaceAddress()
    {
        return $this->container['principal_place_address'];
    }

    /**
     * Sets principal_place_address
     *
     * @param string|null $principal_place_address principal_place_address
     *
     * @return self
     */
    public function setPrincipalPlaceAddress($principal_place_address)
    {
        if (is_null($principal_place_address)) {
            throw new \InvalidArgumentException('non-nullable principal_place_address cannot be null');
        }
        $this->container['principal_place_address'] = $principal_place_address;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return int|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param int|null $reference_id reference_id
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (is_null($reference_id)) {
            throw new \InvalidArgumentException('non-nullable reference_id cannot be null');
        }
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets state_jurisdiction
     *
     * @return string|null
     */
    public function getStateJurisdiction()
    {
        return $this->container['state_jurisdiction'];
    }

    /**
     * Sets state_jurisdiction
     *
     * @param string|null $state_jurisdiction state_jurisdiction
     *
     * @return self
     */
    public function setStateJurisdiction($state_jurisdiction)
    {
        if (is_null($state_jurisdiction)) {
            throw new \InvalidArgumentException('non-nullable state_jurisdiction cannot be null');
        }
        $this->container['state_jurisdiction'] = $state_jurisdiction;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string|null $status_code status_code
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        if (is_null($status_code)) {
            throw new \InvalidArgumentException('non-nullable status_code cannot be null');
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets taxpayer_type
     *
     * @return string|null
     */
    public function getTaxpayerType()
    {
        return $this->container['taxpayer_type'];
    }

    /**
     * Sets taxpayer_type
     *
     * @param string|null $taxpayer_type taxpayer_type
     *
     * @return self
     */
    public function setTaxpayerType($taxpayer_type)
    {
        if (is_null($taxpayer_type)) {
            throw new \InvalidArgumentException('non-nullable taxpayer_type cannot be null');
        }
        $this->container['taxpayer_type'] = $taxpayer_type;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool|null
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool|null $valid valid
     *
     * @return self
     */
    public function setValid($valid)
    {
        if (is_null($valid)) {
            throw new \InvalidArgumentException('non-nullable valid cannot be null');
        }
        $this->container['valid'] = $valid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


