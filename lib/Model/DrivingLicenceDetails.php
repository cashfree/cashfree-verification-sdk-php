<?php
/**
 * DrivingLicenceDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree\Model;

use \ArrayAccess;
use \Cashfree\ObjectSerializer;

/**
 * DrivingLicenceDetails Class Doc Comment
 *
 * @category Class
 * @description It contains the details of the driving licence.
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DrivingLicenceDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DrivingLicenceDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_of_issue' => '\DateTime',
        'date_of_last_transaction' => '\DateTime',
        'status' => 'string',
        'last_transacted_at' => '\DateTime',
        'name' => 'string',
        'father_or_husband_name' => 'string',
        'address_list' => '\Cashfree\Model\AddressDetails[]',
        'address' => 'string',
        'split_address' => '\Cashfree\Model\DrivingLicenceDetailsSplitAddress',
        'cov_details' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_of_issue' => 'date',
        'date_of_last_transaction' => 'date',
        'status' => null,
        'last_transacted_at' => 'date',
        'name' => null,
        'father_or_husband_name' => null,
        'address_list' => null,
        'address' => null,
        'split_address' => null,
        'cov_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'date_of_issue' => false,
		'date_of_last_transaction' => false,
		'status' => false,
		'last_transacted_at' => false,
		'name' => false,
		'father_or_husband_name' => false,
		'address_list' => false,
		'address' => false,
		'split_address' => false,
		'cov_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_of_issue' => 'date_of_issue',
        'date_of_last_transaction' => 'date_of_last_transaction',
        'status' => 'status',
        'last_transacted_at' => 'last_transacted_at',
        'name' => 'name',
        'father_or_husband_name' => 'father_or_husband_name',
        'address_list' => 'address_list',
        'address' => 'address',
        'split_address' => 'split_address',
        'cov_details' => 'cov_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_of_issue' => 'setDateOfIssue',
        'date_of_last_transaction' => 'setDateOfLastTransaction',
        'status' => 'setStatus',
        'last_transacted_at' => 'setLastTransactedAt',
        'name' => 'setName',
        'father_or_husband_name' => 'setFatherOrHusbandName',
        'address_list' => 'setAddressList',
        'address' => 'setAddress',
        'split_address' => 'setSplitAddress',
        'cov_details' => 'setCovDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_of_issue' => 'getDateOfIssue',
        'date_of_last_transaction' => 'getDateOfLastTransaction',
        'status' => 'getStatus',
        'last_transacted_at' => 'getLastTransactedAt',
        'name' => 'getName',
        'father_or_husband_name' => 'getFatherOrHusbandName',
        'address_list' => 'getAddressList',
        'address' => 'getAddress',
        'split_address' => 'getSplitAddress',
        'cov_details' => 'getCovDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('date_of_issue', $data ?? [], null);
        $this->setIfExists('date_of_last_transaction', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('last_transacted_at', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('father_or_husband_name', $data ?? [], null);
        $this->setIfExists('address_list', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('split_address', $data ?? [], null);
        $this->setIfExists('cov_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_of_issue
     *
     * @return \DateTime|null
     */
    public function getDateOfIssue()
    {
        return $this->container['date_of_issue'];
    }

    /**
     * Sets date_of_issue
     *
     * @param \DateTime|null $date_of_issue date_of_issue
     *
     * @return self
     */
    public function setDateOfIssue($date_of_issue)
    {
        if (is_null($date_of_issue)) {
            throw new \InvalidArgumentException('non-nullable date_of_issue cannot be null');
        }
        $this->container['date_of_issue'] = $date_of_issue;

        return $this;
    }

    /**
     * Gets date_of_last_transaction
     *
     * @return \DateTime|null
     */
    public function getDateOfLastTransaction()
    {
        return $this->container['date_of_last_transaction'];
    }

    /**
     * Sets date_of_last_transaction
     *
     * @param \DateTime|null $date_of_last_transaction date_of_last_transaction
     *
     * @return self
     */
    public function setDateOfLastTransaction($date_of_last_transaction)
    {
        if (is_null($date_of_last_transaction)) {
            throw new \InvalidArgumentException('non-nullable date_of_last_transaction cannot be null');
        }
        $this->container['date_of_last_transaction'] = $date_of_last_transaction;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets last_transacted_at
     *
     * @return \DateTime|null
     */
    public function getLastTransactedAt()
    {
        return $this->container['last_transacted_at'];
    }

    /**
     * Sets last_transacted_at
     *
     * @param \DateTime|null $last_transacted_at last_transacted_at
     *
     * @return self
     */
    public function setLastTransactedAt($last_transacted_at)
    {
        if (is_null($last_transacted_at)) {
            throw new \InvalidArgumentException('non-nullable last_transacted_at cannot be null');
        }
        $this->container['last_transacted_at'] = $last_transacted_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets father_or_husband_name
     *
     * @return string|null
     */
    public function getFatherOrHusbandName()
    {
        return $this->container['father_or_husband_name'];
    }

    /**
     * Sets father_or_husband_name
     *
     * @param string|null $father_or_husband_name father_or_husband_name
     *
     * @return self
     */
    public function setFatherOrHusbandName($father_or_husband_name)
    {
        if (is_null($father_or_husband_name)) {
            throw new \InvalidArgumentException('non-nullable father_or_husband_name cannot be null');
        }
        $this->container['father_or_husband_name'] = $father_or_husband_name;

        return $this;
    }

    /**
     * Gets address_list
     *
     * @return \Cashfree\Model\AddressDetails[]|null
     */
    public function getAddressList()
    {
        return $this->container['address_list'];
    }

    /**
     * Sets address_list
     *
     * @param \Cashfree\Model\AddressDetails[]|null $address_list address_list
     *
     * @return self
     */
    public function setAddressList($address_list)
    {
        if (is_null($address_list)) {
            throw new \InvalidArgumentException('non-nullable address_list cannot be null');
        }
        $this->container['address_list'] = $address_list;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets split_address
     *
     * @return \Cashfree\Model\DrivingLicenceDetailsSplitAddress|null
     */
    public function getSplitAddress()
    {
        return $this->container['split_address'];
    }

    /**
     * Sets split_address
     *
     * @param \Cashfree\Model\DrivingLicenceDetailsSplitAddress|null $split_address split_address
     *
     * @return self
     */
    public function setSplitAddress($split_address)
    {
        if (is_null($split_address)) {
            throw new \InvalidArgumentException('non-nullable split_address cannot be null');
        }
        $this->container['split_address'] = $split_address;

        return $this;
    }

    /**
     * Gets cov_details
     *
     * @return object[]|null
     */
    public function getCovDetails()
    {
        return $this->container['cov_details'];
    }

    /**
     * Sets cov_details
     *
     * @param object[]|null $cov_details cov_details
     *
     * @return self
     */
    public function setCovDetails($cov_details)
    {
        if (is_null($cov_details)) {
            throw new \InvalidArgumentException('non-nullable cov_details cannot be null');
        }
        $this->container['cov_details'] = $cov_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


