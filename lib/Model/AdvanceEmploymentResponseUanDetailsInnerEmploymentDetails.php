<?php
/**
 * AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree\Model;

use \ArrayAccess;
use \Cashfree\ObjectSerializer;

/**
 * AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails Class Doc Comment
 *
 * @category Class
 * @description It contains the employement details of the individual.
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdvanceEmploymentResponse_uan_details_inner_employment_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'member_id' => 'string',
        'establishment_id' => 'string',
        'exit_date' => 'string',
        'joining_date' => 'string',
        'leave_reason' => 'string',
        'establishment_name' => 'string',
        'employer_confidence_score' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'member_id' => null,
        'establishment_id' => null,
        'exit_date' => null,
        'joining_date' => null,
        'leave_reason' => null,
        'establishment_name' => null,
        'employer_confidence_score' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'member_id' => false,
		'establishment_id' => false,
		'exit_date' => false,
		'joining_date' => false,
		'leave_reason' => false,
		'establishment_name' => false,
		'employer_confidence_score' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'member_id' => 'member_id',
        'establishment_id' => 'establishment_id',
        'exit_date' => 'exit_date',
        'joining_date' => 'joining_date',
        'leave_reason' => 'leave_reason',
        'establishment_name' => 'establishment_name',
        'employer_confidence_score' => 'employer_confidence_score'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'member_id' => 'setMemberId',
        'establishment_id' => 'setEstablishmentId',
        'exit_date' => 'setExitDate',
        'joining_date' => 'setJoiningDate',
        'leave_reason' => 'setLeaveReason',
        'establishment_name' => 'setEstablishmentName',
        'employer_confidence_score' => 'setEmployerConfidenceScore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'member_id' => 'getMemberId',
        'establishment_id' => 'getEstablishmentId',
        'exit_date' => 'getExitDate',
        'joining_date' => 'getJoiningDate',
        'leave_reason' => 'getLeaveReason',
        'establishment_name' => 'getEstablishmentName',
        'employer_confidence_score' => 'getEmployerConfidenceScore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('member_id', $data ?? [], null);
        $this->setIfExists('establishment_id', $data ?? [], null);
        $this->setIfExists('exit_date', $data ?? [], null);
        $this->setIfExists('joining_date', $data ?? [], null);
        $this->setIfExists('leave_reason', $data ?? [], null);
        $this->setIfExists('establishment_name', $data ?? [], null);
        $this->setIfExists('employer_confidence_score', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets member_id
     *
     * @return string|null
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param string|null $member_id It displays the unique ID assigned to an individual.
     *
     * @return self
     */
    public function setMemberId($member_id)
    {
        if (is_null($member_id)) {
            throw new \InvalidArgumentException('non-nullable member_id cannot be null');
        }
        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets establishment_id
     *
     * @return string|null
     */
    public function getEstablishmentId()
    {
        return $this->container['establishment_id'];
    }

    /**
     * Sets establishment_id
     *
     * @param string|null $establishment_id It displays the unique ID assigned to a specific establishment or business entity.
     *
     * @return self
     */
    public function setEstablishmentId($establishment_id)
    {
        if (is_null($establishment_id)) {
            throw new \InvalidArgumentException('non-nullable establishment_id cannot be null');
        }
        $this->container['establishment_id'] = $establishment_id;

        return $this;
    }

    /**
     * Gets exit_date
     *
     * @return string|null
     */
    public function getExitDate()
    {
        return $this->container['exit_date'];
    }

    /**
     * Sets exit_date
     *
     * @param string|null $exit_date It displays the last working day of the employee in the organisation.
     *
     * @return self
     */
    public function setExitDate($exit_date)
    {
        if (is_null($exit_date)) {
            throw new \InvalidArgumentException('non-nullable exit_date cannot be null');
        }
        $this->container['exit_date'] = $exit_date;

        return $this;
    }

    /**
     * Gets joining_date
     *
     * @return string|null
     */
    public function getJoiningDate()
    {
        return $this->container['joining_date'];
    }

    /**
     * Sets joining_date
     *
     * @param string|null $joining_date It displays the first working day of the employee in the organisation.
     *
     * @return self
     */
    public function setJoiningDate($joining_date)
    {
        if (is_null($joining_date)) {
            throw new \InvalidArgumentException('non-nullable joining_date cannot be null');
        }
        $this->container['joining_date'] = $joining_date;

        return $this;
    }

    /**
     * Gets leave_reason
     *
     * @return string|null
     */
    public function getLeaveReason()
    {
        return $this->container['leave_reason'];
    }

    /**
     * Sets leave_reason
     *
     * @param string|null $leave_reason It displays the reason for leaving the previous job.
     *
     * @return self
     */
    public function setLeaveReason($leave_reason)
    {
        if (is_null($leave_reason)) {
            throw new \InvalidArgumentException('non-nullable leave_reason cannot be null');
        }
        $this->container['leave_reason'] = $leave_reason;

        return $this;
    }

    /**
     * Gets establishment_name
     *
     * @return string|null
     */
    public function getEstablishmentName()
    {
        return $this->container['establishment_name'];
    }

    /**
     * Sets establishment_name
     *
     * @param string|null $establishment_name It displays the name of the organisation.
     *
     * @return self
     */
    public function setEstablishmentName($establishment_name)
    {
        if (is_null($establishment_name)) {
            throw new \InvalidArgumentException('non-nullable establishment_name cannot be null');
        }
        $this->container['establishment_name'] = $establishment_name;

        return $this;
    }

    /**
     * Gets employer_confidence_score
     *
     * @return float|null
     */
    public function getEmployerConfidenceScore()
    {
        return $this->container['employer_confidence_score'];
    }

    /**
     * Sets employer_confidence_score
     *
     * @param float|null $employer_confidence_score It displays the
     *
     * @return self
     */
    public function setEmployerConfidenceScore($employer_confidence_score)
    {
        if (is_null($employer_confidence_score)) {
            throw new \InvalidArgumentException('non-nullable employer_confidence_score cannot be null');
        }
        $this->container['employer_confidence_score'] = $employer_confidence_score;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


