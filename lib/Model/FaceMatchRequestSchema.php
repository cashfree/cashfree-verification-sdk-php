<?php
/**
 * FaceMatchRequestSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree\Model;

use \ArrayAccess;
use \Cashfree\ObjectSerializer;

/**
 * FaceMatchRequestSchema Class Doc Comment
 *
 * @category Class
 * @description Find the request parameters to verify facial features in two images
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FaceMatchRequestSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FaceMatchRequestSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'verification_id' => 'string',
        'first_image' => '\SplFileObject',
        'second_image' => '\SplFileObject',
        'threshold' => 'string',
        'detect_mask_first_image' => 'bool',
        'detect_mask_second_image' => 'bool',
        'align_horizontally' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'verification_id' => null,
        'first_image' => 'binary',
        'second_image' => 'binary',
        'threshold' => null,
        'detect_mask_first_image' => null,
        'detect_mask_second_image' => null,
        'align_horizontally' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'verification_id' => false,
		'first_image' => false,
		'second_image' => false,
		'threshold' => false,
		'detect_mask_first_image' => false,
		'detect_mask_second_image' => false,
		'align_horizontally' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'verification_id' => 'verification_id',
        'first_image' => 'first_image',
        'second_image' => 'second_image',
        'threshold' => 'threshold',
        'detect_mask_first_image' => 'detect_mask_first_image',
        'detect_mask_second_image' => 'detect_mask_second_image',
        'align_horizontally' => 'align_horizontally'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'verification_id' => 'setVerificationId',
        'first_image' => 'setFirstImage',
        'second_image' => 'setSecondImage',
        'threshold' => 'setThreshold',
        'detect_mask_first_image' => 'setDetectMaskFirstImage',
        'detect_mask_second_image' => 'setDetectMaskSecondImage',
        'align_horizontally' => 'setAlignHorizontally'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'verification_id' => 'getVerificationId',
        'first_image' => 'getFirstImage',
        'second_image' => 'getSecondImage',
        'threshold' => 'getThreshold',
        'detect_mask_first_image' => 'getDetectMaskFirstImage',
        'detect_mask_second_image' => 'getDetectMaskSecondImage',
        'align_horizontally' => 'getAlignHorizontally'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('verification_id', $data ?? [], '12345678');
        $this->setIfExists('first_image', $data ?? [], null);
        $this->setIfExists('second_image', $data ?? [], null);
        $this->setIfExists('threshold', $data ?? [], '0.5');
        $this->setIfExists('detect_mask_first_image', $data ?? [], null);
        $this->setIfExists('detect_mask_second_image', $data ?? [], null);
        $this->setIfExists('align_horizontally', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['verification_id'] === null) {
            $invalidProperties[] = "'verification_id' can't be null";
        }
        if ($this->container['first_image'] === null) {
            $invalidProperties[] = "'first_image' can't be null";
        }
        if ($this->container['second_image'] === null) {
            $invalidProperties[] = "'second_image' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets verification_id
     *
     * @return string
     */
    public function getVerificationId()
    {
        return $this->container['verification_id'];
    }

    /**
     * Sets verification_id
     *
     * @param string $verification_id It is the unique ID you need to create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-) and underscore ( _ ) are allowed.
     *
     * @return self
     */
    public function setVerificationId($verification_id)
    {
        if (is_null($verification_id)) {
            throw new \InvalidArgumentException('non-nullable verification_id cannot be null');
        }
        $this->container['verification_id'] = $verification_id;

        return $this;
    }

    /**
     * Gets first_image
     *
     * @return \SplFileObject
     */
    public function getFirstImage()
    {
        return $this->container['first_image'];
    }

    /**
     * Sets first_image
     *
     * @param \SplFileObject $first_image It is the scanned copy of the image 1. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.
     *
     * @return self
     */
    public function setFirstImage($first_image)
    {
        if (is_null($first_image)) {
            throw new \InvalidArgumentException('non-nullable first_image cannot be null');
        }
        $this->container['first_image'] = $first_image;

        return $this;
    }

    /**
     * Gets second_image
     *
     * @return \SplFileObject
     */
    public function getSecondImage()
    {
        return $this->container['second_image'];
    }

    /**
     * Sets second_image
     *
     * @param \SplFileObject $second_image It is the scanned copy of the image 2. Allowed file type - JPEG/JPG/PNG. Maximum file size allowed for both the files is 10 MB.
     *
     * @return self
     */
    public function setSecondImage($second_image)
    {
        if (is_null($second_image)) {
            throw new \InvalidArgumentException('non-nullable second_image cannot be null');
        }
        $this->container['second_image'] = $second_image;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return string|null
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param string|null $threshold It is the value to distinguish and match the facial features of the two images. The range is between 0 and 1. The default value is set as 0.7. We conclude that the images match when the analysis is or greater than the value set for threshold.
     *
     * @return self
     */
    public function setThreshold($threshold)
    {
        if (is_null($threshold)) {
            throw new \InvalidArgumentException('non-nullable threshold cannot be null');
        }
        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets detect_mask_first_image
     *
     * @return bool|null
     */
    public function getDetectMaskFirstImage()
    {
        return $this->container['detect_mask_first_image'];
    }

    /**
     * Sets detect_mask_first_image
     *
     * @param bool|null $detect_mask_first_image It is a boolean value to identify whether the person in the first image is wearing a mask.
     *
     * @return self
     */
    public function setDetectMaskFirstImage($detect_mask_first_image)
    {
        if (is_null($detect_mask_first_image)) {
            throw new \InvalidArgumentException('non-nullable detect_mask_first_image cannot be null');
        }
        $this->container['detect_mask_first_image'] = $detect_mask_first_image;

        return $this;
    }

    /**
     * Gets detect_mask_second_image
     *
     * @return bool|null
     */
    public function getDetectMaskSecondImage()
    {
        return $this->container['detect_mask_second_image'];
    }

    /**
     * Sets detect_mask_second_image
     *
     * @param bool|null $detect_mask_second_image It is a boolean value to identify whether the person in the first image is wearing a mask.
     *
     * @return self
     */
    public function setDetectMaskSecondImage($detect_mask_second_image)
    {
        if (is_null($detect_mask_second_image)) {
            throw new \InvalidArgumentException('non-nullable detect_mask_second_image cannot be null');
        }
        $this->container['detect_mask_second_image'] = $detect_mask_second_image;

        return $this;
    }

    /**
     * Gets align_horizontally
     *
     * @return bool|null
     */
    public function getAlignHorizontally()
    {
        return $this->container['align_horizontally'];
    }

    /**
     * Sets align_horizontally
     *
     * @param bool|null $align_horizontally It is a boolean value to align the images horizontally before analysing the facial features.
     *
     * @return self
     */
    public function setAlignHorizontally($align_horizontally)
    {
        if (is_null($align_horizontally)) {
            throw new \InvalidArgumentException('non-nullable align_horizontally cannot be null');
        }
        $this->container['align_horizontally'] = $align_horizontally;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


