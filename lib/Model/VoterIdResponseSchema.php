<?php
/**
 * VoterIdResponseSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree\Model;

use \ArrayAccess;
use \Cashfree\ObjectSerializer;

/**
 * VoterIdResponseSchema Class Doc Comment
 *
 * @category Class
 * @description Verify Voter ID success response
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VoterIdResponseSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VoterIdResponseSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'reference_id' => 'int',
        'verification_id' => 'string',
        'status' => 'string',
        'name' => 'string',
        'name_in_regional_lang' => 'string',
        'age' => 'string',
        'relation_type' => 'string',
        'relation_name' => 'string',
        'relation_name_in_regional_lang' => 'string',
        'father_name' => 'string',
        'dob' => 'string',
        'gender' => 'string',
        'address' => 'string',
        'split_address' => '\Cashfree\Model\SplitAddressSchema',
        'epic_number' => 'string',
        'state' => 'string',
        'assembly_constituency_number' => 'string',
        'assembly_constituency' => 'string',
        'parliamentary_constituency_number' => 'string',
        'parliamentary_constituency' => 'string',
        'part_number' => 'string',
        'part_name' => 'string',
        'serial_number' => 'string',
        'polling_station' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'reference_id' => null,
        'verification_id' => null,
        'status' => null,
        'name' => null,
        'name_in_regional_lang' => null,
        'age' => null,
        'relation_type' => null,
        'relation_name' => null,
        'relation_name_in_regional_lang' => null,
        'father_name' => null,
        'dob' => null,
        'gender' => null,
        'address' => null,
        'split_address' => null,
        'epic_number' => null,
        'state' => null,
        'assembly_constituency_number' => null,
        'assembly_constituency' => null,
        'parliamentary_constituency_number' => null,
        'parliamentary_constituency' => null,
        'part_number' => null,
        'part_name' => null,
        'serial_number' => null,
        'polling_station' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'reference_id' => false,
		'verification_id' => false,
		'status' => false,
		'name' => false,
		'name_in_regional_lang' => false,
		'age' => false,
		'relation_type' => false,
		'relation_name' => false,
		'relation_name_in_regional_lang' => false,
		'father_name' => false,
		'dob' => false,
		'gender' => false,
		'address' => false,
		'split_address' => false,
		'epic_number' => false,
		'state' => false,
		'assembly_constituency_number' => false,
		'assembly_constituency' => false,
		'parliamentary_constituency_number' => false,
		'parliamentary_constituency' => false,
		'part_number' => false,
		'part_name' => false,
		'serial_number' => false,
		'polling_station' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reference_id' => 'reference_id',
        'verification_id' => 'verification_id',
        'status' => 'status',
        'name' => 'name',
        'name_in_regional_lang' => 'name_in_regional_lang',
        'age' => 'age',
        'relation_type' => 'relation_type',
        'relation_name' => 'relation_name',
        'relation_name_in_regional_lang' => 'relation_name_in_regional_lang',
        'father_name' => 'father_name',
        'dob' => 'dob',
        'gender' => 'gender',
        'address' => 'address',
        'split_address' => 'split_address',
        'epic_number' => 'epic_number',
        'state' => 'state',
        'assembly_constituency_number' => 'assembly_constituency_number',
        'assembly_constituency' => 'assembly_constituency',
        'parliamentary_constituency_number' => 'parliamentary_constituency_number',
        'parliamentary_constituency' => 'parliamentary_constituency',
        'part_number' => 'part_number',
        'part_name' => 'part_name',
        'serial_number' => 'serial_number',
        'polling_station' => 'polling_station'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reference_id' => 'setReferenceId',
        'verification_id' => 'setVerificationId',
        'status' => 'setStatus',
        'name' => 'setName',
        'name_in_regional_lang' => 'setNameInRegionalLang',
        'age' => 'setAge',
        'relation_type' => 'setRelationType',
        'relation_name' => 'setRelationName',
        'relation_name_in_regional_lang' => 'setRelationNameInRegionalLang',
        'father_name' => 'setFatherName',
        'dob' => 'setDob',
        'gender' => 'setGender',
        'address' => 'setAddress',
        'split_address' => 'setSplitAddress',
        'epic_number' => 'setEpicNumber',
        'state' => 'setState',
        'assembly_constituency_number' => 'setAssemblyConstituencyNumber',
        'assembly_constituency' => 'setAssemblyConstituency',
        'parliamentary_constituency_number' => 'setParliamentaryConstituencyNumber',
        'parliamentary_constituency' => 'setParliamentaryConstituency',
        'part_number' => 'setPartNumber',
        'part_name' => 'setPartName',
        'serial_number' => 'setSerialNumber',
        'polling_station' => 'setPollingStation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reference_id' => 'getReferenceId',
        'verification_id' => 'getVerificationId',
        'status' => 'getStatus',
        'name' => 'getName',
        'name_in_regional_lang' => 'getNameInRegionalLang',
        'age' => 'getAge',
        'relation_type' => 'getRelationType',
        'relation_name' => 'getRelationName',
        'relation_name_in_regional_lang' => 'getRelationNameInRegionalLang',
        'father_name' => 'getFatherName',
        'dob' => 'getDob',
        'gender' => 'getGender',
        'address' => 'getAddress',
        'split_address' => 'getSplitAddress',
        'epic_number' => 'getEpicNumber',
        'state' => 'getState',
        'assembly_constituency_number' => 'getAssemblyConstituencyNumber',
        'assembly_constituency' => 'getAssemblyConstituency',
        'parliamentary_constituency_number' => 'getParliamentaryConstituencyNumber',
        'parliamentary_constituency' => 'getParliamentaryConstituency',
        'part_number' => 'getPartNumber',
        'part_name' => 'getPartName',
        'serial_number' => 'getSerialNumber',
        'polling_station' => 'getPollingStation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('reference_id', $data ?? [], null);
        $this->setIfExists('verification_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('name_in_regional_lang', $data ?? [], null);
        $this->setIfExists('age', $data ?? [], null);
        $this->setIfExists('relation_type', $data ?? [], null);
        $this->setIfExists('relation_name', $data ?? [], null);
        $this->setIfExists('relation_name_in_regional_lang', $data ?? [], null);
        $this->setIfExists('father_name', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('split_address', $data ?? [], null);
        $this->setIfExists('epic_number', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('assembly_constituency_number', $data ?? [], null);
        $this->setIfExists('assembly_constituency', $data ?? [], null);
        $this->setIfExists('parliamentary_constituency_number', $data ?? [], null);
        $this->setIfExists('parliamentary_constituency', $data ?? [], null);
        $this->setIfExists('part_number', $data ?? [], null);
        $this->setIfExists('part_name', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('polling_station', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference_id
     *
     * @return int|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param int|null $reference_id It displays the unique ID created by Cashfree Payments for reference purposes.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (is_null($reference_id)) {
            throw new \InvalidArgumentException('non-nullable reference_id cannot be null');
        }
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets verification_id
     *
     * @return string|null
     */
    public function getVerificationId()
    {
        return $this->container['verification_id'];
    }

    /**
     * Sets verification_id
     *
     * @param string|null $verification_id It displays the unique ID you created to identify the verification request.
     *
     * @return self
     */
    public function setVerificationId($verification_id)
    {
        if (is_null($verification_id)) {
            throw new \InvalidArgumentException('non-nullable verification_id cannot be null');
        }
        $this->container['verification_id'] = $verification_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status It displays the status of the API request.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name It displays the name of the individual as present in the voter ID card.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_in_regional_lang
     *
     * @return string|null
     */
    public function getNameInRegionalLang()
    {
        return $this->container['name_in_regional_lang'];
    }

    /**
     * Sets name_in_regional_lang
     *
     * @param string|null $name_in_regional_lang It displays the name of the individual in the individual’s regional language as present in the voter ID card.
     *
     * @return self
     */
    public function setNameInRegionalLang($name_in_regional_lang)
    {
        if (is_null($name_in_regional_lang)) {
            throw new \InvalidArgumentException('non-nullable name_in_regional_lang cannot be null');
        }
        $this->container['name_in_regional_lang'] = $name_in_regional_lang;

        return $this;
    }

    /**
     * Gets age
     *
     * @return string|null
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param string|null $age It displays the age of the voter ID holder as present in the voter ID card
     *
     * @return self
     */
    public function setAge($age)
    {
        if (is_null($age)) {
            throw new \InvalidArgumentException('non-nullable age cannot be null');
        }
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets relation_type
     *
     * @return string|null
     */
    public function getRelationType()
    {
        return $this->container['relation_type'];
    }

    /**
     * Sets relation_type
     *
     * @param string|null $relation_type It displays the type of the relationship with the parent/guardian as present in the voter ID card.
     *
     * @return self
     */
    public function setRelationType($relation_type)
    {
        if (is_null($relation_type)) {
            throw new \InvalidArgumentException('non-nullable relation_type cannot be null');
        }
        $this->container['relation_type'] = $relation_type;

        return $this;
    }

    /**
     * Gets relation_name
     *
     * @return string|null
     */
    public function getRelationName()
    {
        return $this->container['relation_name'];
    }

    /**
     * Sets relation_name
     *
     * @param string|null $relation_name It displays the name of the parent/guardian as present in the voter ID card.
     *
     * @return self
     */
    public function setRelationName($relation_name)
    {
        if (is_null($relation_name)) {
            throw new \InvalidArgumentException('non-nullable relation_name cannot be null');
        }
        $this->container['relation_name'] = $relation_name;

        return $this;
    }

    /**
     * Gets relation_name_in_regional_lang
     *
     * @return string|null
     */
    public function getRelationNameInRegionalLang()
    {
        return $this->container['relation_name_in_regional_lang'];
    }

    /**
     * Sets relation_name_in_regional_lang
     *
     * @param string|null $relation_name_in_regional_lang It displays the name of the parent/guardian in the individual’s regional language as present in the voter ID card.
     *
     * @return self
     */
    public function setRelationNameInRegionalLang($relation_name_in_regional_lang)
    {
        if (is_null($relation_name_in_regional_lang)) {
            throw new \InvalidArgumentException('non-nullable relation_name_in_regional_lang cannot be null');
        }
        $this->container['relation_name_in_regional_lang'] = $relation_name_in_regional_lang;

        return $this;
    }

    /**
     * Gets father_name
     *
     * @return string|null
     */
    public function getFatherName()
    {
        return $this->container['father_name'];
    }

    /**
     * Sets father_name
     *
     * @param string|null $father_name It displays the father’s name of the individual as present in the voter ID card.
     *
     * @return self
     */
    public function setFatherName($father_name)
    {
        if (is_null($father_name)) {
            throw new \InvalidArgumentException('non-nullable father_name cannot be null');
        }
        $this->container['father_name'] = $father_name;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return string|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param string|null $dob It displays the date of birth of the individual as present in the voter ID card.
     *
     * @return self
     */
    public function setDob($dob)
    {
        if (is_null($dob)) {
            throw new \InvalidArgumentException('non-nullable dob cannot be null');
        }
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender It displays the gender of the individual as present in the voter ID card.
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address It displays the address information of the individual as present in the voter ID card.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets split_address
     *
     * @return \Cashfree\Model\SplitAddressSchema|null
     */
    public function getSplitAddress()
    {
        return $this->container['split_address'];
    }

    /**
     * Sets split_address
     *
     * @param \Cashfree\Model\SplitAddressSchema|null $split_address split_address
     *
     * @return self
     */
    public function setSplitAddress($split_address)
    {
        if (is_null($split_address)) {
            throw new \InvalidArgumentException('non-nullable split_address cannot be null');
        }
        $this->container['split_address'] = $split_address;

        return $this;
    }

    /**
     * Gets epic_number
     *
     * @return string|null
     */
    public function getEpicNumber()
    {
        return $this->container['epic_number'];
    }

    /**
     * Sets epic_number
     *
     * @param string|null $epic_number It displays the EPIC number of the individual as present in the voter ID card.
     *
     * @return self
     */
    public function setEpicNumber($epic_number)
    {
        if (is_null($epic_number)) {
            throw new \InvalidArgumentException('non-nullable epic_number cannot be null');
        }
        $this->container['epic_number'] = $epic_number;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state It displays the name of the state as present in the voter ID card.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets assembly_constituency_number
     *
     * @return string|null
     */
    public function getAssemblyConstituencyNumber()
    {
        return $this->container['assembly_constituency_number'];
    }

    /**
     * Sets assembly_constituency_number
     *
     * @param string|null $assembly_constituency_number It displays the number associated with the assembly constituency as present in the voter ID card.
     *
     * @return self
     */
    public function setAssemblyConstituencyNumber($assembly_constituency_number)
    {
        if (is_null($assembly_constituency_number)) {
            throw new \InvalidArgumentException('non-nullable assembly_constituency_number cannot be null');
        }
        $this->container['assembly_constituency_number'] = $assembly_constituency_number;

        return $this;
    }

    /**
     * Gets assembly_constituency
     *
     * @return string|null
     */
    public function getAssemblyConstituency()
    {
        return $this->container['assembly_constituency'];
    }

    /**
     * Sets assembly_constituency
     *
     * @param string|null $assembly_constituency It displays the name of the assembly constituency as present in the voter ID card.
     *
     * @return self
     */
    public function setAssemblyConstituency($assembly_constituency)
    {
        if (is_null($assembly_constituency)) {
            throw new \InvalidArgumentException('non-nullable assembly_constituency cannot be null');
        }
        $this->container['assembly_constituency'] = $assembly_constituency;

        return $this;
    }

    /**
     * Gets parliamentary_constituency_number
     *
     * @return string|null
     */
    public function getParliamentaryConstituencyNumber()
    {
        return $this->container['parliamentary_constituency_number'];
    }

    /**
     * Sets parliamentary_constituency_number
     *
     * @param string|null $parliamentary_constituency_number It displays the number associated with the parliamentary constituency as present in the voter ID card.
     *
     * @return self
     */
    public function setParliamentaryConstituencyNumber($parliamentary_constituency_number)
    {
        if (is_null($parliamentary_constituency_number)) {
            throw new \InvalidArgumentException('non-nullable parliamentary_constituency_number cannot be null');
        }
        $this->container['parliamentary_constituency_number'] = $parliamentary_constituency_number;

        return $this;
    }

    /**
     * Gets parliamentary_constituency
     *
     * @return string|null
     */
    public function getParliamentaryConstituency()
    {
        return $this->container['parliamentary_constituency'];
    }

    /**
     * Sets parliamentary_constituency
     *
     * @param string|null $parliamentary_constituency It displays the name of the parliamentary constituency as present in the voter ID card.
     *
     * @return self
     */
    public function setParliamentaryConstituency($parliamentary_constituency)
    {
        if (is_null($parliamentary_constituency)) {
            throw new \InvalidArgumentException('non-nullable parliamentary_constituency cannot be null');
        }
        $this->container['parliamentary_constituency'] = $parliamentary_constituency;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string|null
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string|null $part_number It displays the part number in the electoral roll.
     *
     * @return self
     */
    public function setPartNumber($part_number)
    {
        if (is_null($part_number)) {
            throw new \InvalidArgumentException('non-nullable part_number cannot be null');
        }
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets part_name
     *
     * @return string|null
     */
    public function getPartName()
    {
        return $this->container['part_name'];
    }

    /**
     * Sets part_name
     *
     * @param string|null $part_name It displays the part name in the electoral roll.
     *
     * @return self
     */
    public function setPartName($part_name)
    {
        if (is_null($part_name)) {
            throw new \InvalidArgumentException('non-nullable part_name cannot be null');
        }
        $this->container['part_name'] = $part_name;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number It displays the serial number as present in the voter ID card.
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            throw new \InvalidArgumentException('non-nullable serial_number cannot be null');
        }
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets polling_station
     *
     * @return string|null
     */
    public function getPollingStation()
    {
        return $this->container['polling_station'];
    }

    /**
     * Sets polling_station
     *
     * @param string|null $polling_station It displays the place where the individual cast votes during elections.
     *
     * @return self
     */
    public function setPollingStation($polling_station)
    {
        if (is_null($polling_station)) {
            throw new \InvalidArgumentException('non-nullable polling_station cannot be null');
        }
        $this->container['polling_station'] = $polling_station;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


