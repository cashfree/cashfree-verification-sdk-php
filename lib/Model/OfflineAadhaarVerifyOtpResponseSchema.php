<?php
/**
 * OfflineAadhaarVerifyOtpResponseSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree\Model;

use \ArrayAccess;
use \Cashfree\ObjectSerializer;

/**
 * OfflineAadhaarVerifyOtpResponseSchema Class Doc Comment
 *
 * @category Class
 * @description Success response for Submit OTP for Aadhaar Verification
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OfflineAadhaarVerifyOtpResponseSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OfflineAadhaarVerifyOtpResponseSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ref_id' => 'string',
        'status' => 'string',
        'message' => 'string',
        'care_of' => 'string',
        'address' => 'string',
        'dob' => 'string',
        'email' => 'string',
        'gender' => 'string',
        'name' => 'string',
        'year_of_birth' => 'string',
        'mobile_hash' => 'string',
        'photo_link' => 'string',
        'split_address' => '\Cashfree\Model\OfflineAadhaarVerifyOtpResponseSchemaSplitAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ref_id' => null,
        'status' => null,
        'message' => null,
        'care_of' => null,
        'address' => null,
        'dob' => null,
        'email' => null,
        'gender' => null,
        'name' => null,
        'year_of_birth' => null,
        'mobile_hash' => null,
        'photo_link' => null,
        'split_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'ref_id' => false,
		'status' => false,
		'message' => false,
		'care_of' => false,
		'address' => false,
		'dob' => false,
		'email' => false,
		'gender' => false,
		'name' => false,
		'year_of_birth' => false,
		'mobile_hash' => false,
		'photo_link' => false,
		'split_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_id' => 'ref_id',
        'status' => 'status',
        'message' => 'message',
        'care_of' => 'care_of',
        'address' => 'address',
        'dob' => 'dob',
        'email' => 'email',
        'gender' => 'gender',
        'name' => 'name',
        'year_of_birth' => 'year_of_birth',
        'mobile_hash' => 'mobile_hash',
        'photo_link' => 'photo_link',
        'split_address' => 'split_address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ref_id' => 'setRefId',
        'status' => 'setStatus',
        'message' => 'setMessage',
        'care_of' => 'setCareOf',
        'address' => 'setAddress',
        'dob' => 'setDob',
        'email' => 'setEmail',
        'gender' => 'setGender',
        'name' => 'setName',
        'year_of_birth' => 'setYearOfBirth',
        'mobile_hash' => 'setMobileHash',
        'photo_link' => 'setPhotoLink',
        'split_address' => 'setSplitAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ref_id' => 'getRefId',
        'status' => 'getStatus',
        'message' => 'getMessage',
        'care_of' => 'getCareOf',
        'address' => 'getAddress',
        'dob' => 'getDob',
        'email' => 'getEmail',
        'gender' => 'getGender',
        'name' => 'getName',
        'year_of_birth' => 'getYearOfBirth',
        'mobile_hash' => 'getMobileHash',
        'photo_link' => 'getPhotoLink',
        'split_address' => 'getSplitAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ref_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('care_of', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('year_of_birth', $data ?? [], null);
        $this->setIfExists('mobile_hash', $data ?? [], null);
        $this->setIfExists('photo_link', $data ?? [], null);
        $this->setIfExists('split_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ref_id
     *
     * @return string|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param string|null $ref_id It displays the unique ID created by Cashfree Payments for reference purposes.
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        if (is_null($ref_id)) {
            throw new \InvalidArgumentException('non-nullable ref_id cannot be null');
        }
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status It displays the status of the aadhaar information.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message It displays details about the success or failure of the API request.
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets care_of
     *
     * @return string|null
     */
    public function getCareOf()
    {
        return $this->container['care_of'];
    }

    /**
     * Sets care_of
     *
     * @param string|null $care_of It displays the parent/guardian of the aadhaar card holder.
     *
     * @return self
     */
    public function setCareOf($care_of)
    {
        if (is_null($care_of)) {
            throw new \InvalidArgumentException('non-nullable care_of cannot be null');
        }
        $this->container['care_of'] = $care_of;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address It displays the address information as present in the aadhaar card.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return string|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param string|null $dob It displays the date of birth of the aadhaar card holder.
     *
     * @return self
     */
    public function setDob($dob)
    {
        if (is_null($dob)) {
            throw new \InvalidArgumentException('non-nullable dob cannot be null');
        }
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email It displays the email address of the aadhaar card holder.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender It displays the gender of the aadhaar card holder.
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name It displays the name of the aadhaar card holder.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets year_of_birth
     *
     * @return string|null
     */
    public function getYearOfBirth()
    {
        return $this->container['year_of_birth'];
    }

    /**
     * Sets year_of_birth
     *
     * @param string|null $year_of_birth It displays the year of birth of the aadhaar card holder.
     *
     * @return self
     */
    public function setYearOfBirth($year_of_birth)
    {
        if (is_null($year_of_birth)) {
            throw new \InvalidArgumentException('non-nullable year_of_birth cannot be null');
        }
        $this->container['year_of_birth'] = $year_of_birth;

        return $this;
    }

    /**
     * Gets mobile_hash
     *
     * @return string|null
     */
    public function getMobileHash()
    {
        return $this->container['mobile_hash'];
    }

    /**
     * Sets mobile_hash
     *
     * @param string|null $mobile_hash It displays the unique information about the device's hardware, software, and other characteristics.
     *
     * @return self
     */
    public function setMobileHash($mobile_hash)
    {
        if (is_null($mobile_hash)) {
            throw new \InvalidArgumentException('non-nullable mobile_hash cannot be null');
        }
        $this->container['mobile_hash'] = $mobile_hash;

        return $this;
    }

    /**
     * Gets photo_link
     *
     * @return string|null
     */
    public function getPhotoLink()
    {
        return $this->container['photo_link'];
    }

    /**
     * Sets photo_link
     *
     * @param string|null $photo_link It displays the URL to the image present in the aadhaar card.
     *
     * @return self
     */
    public function setPhotoLink($photo_link)
    {
        if (is_null($photo_link)) {
            throw new \InvalidArgumentException('non-nullable photo_link cannot be null');
        }
        $this->container['photo_link'] = $photo_link;

        return $this;
    }

    /**
     * Gets split_address
     *
     * @return \Cashfree\Model\OfflineAadhaarVerifyOtpResponseSchemaSplitAddress|null
     */
    public function getSplitAddress()
    {
        return $this->container['split_address'];
    }

    /**
     * Sets split_address
     *
     * @param \Cashfree\Model\OfflineAadhaarVerifyOtpResponseSchemaSplitAddress|null $split_address split_address
     *
     * @return self
     */
    public function setSplitAddress($split_address)
    {
        if (is_null($split_address)) {
            throw new \InvalidArgumentException('non-nullable split_address cannot be null');
        }
        $this->container['split_address'] = $split_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


