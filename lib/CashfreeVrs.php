<?php
/**
 * Configuration
 * PHP version 7.4
 *
 * @category Class
 * @package  Cashfree
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cashfree Verification API's.
 *
 * Cashfree's Verification APIs provide different types of verification to our merchants.
 *
 * The version of the OpenAPI document: 2023-12-18
 * Contact: developers@cashfree.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cashfree;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Cashfree\ApiException;
use Cashfree\ObjectSerializer;
use Exception;

class CashfreeVrs {

    protected $client;
    protected $headerSelector;

    public static $XClientId = "";
    public static $XClientSecret = "";
    public static $XEnvironment = "";
    public static $XEnableErrorAnalytics = "";
    public static $XApiVersion = "2023-12-18";

    public static $SANDBOX = 0;
    public static $PRODUCTION = 1;

    public const contentTypes = [
        'vrsAadhaarOcrVerification' => [
            'multipart/form-data',
        ],
        'vrsMaskAadhaar' => [
            'multipart/form-data',
        ],
        'vrsOfflineAadhaarSendOtp' => [
            'application/json',
        ],
        'vrsOfflineAadhaarVerifyOtp' => [
            'application/json',
        ],
        'vrsAdvanceEmploymentVerification' => [
            'application/json',
        ],
        'vrsCinVerification' => [
            'application/json',
        ],
        'vrsDigilockerVerificationCreateUrl' => [
            'application/json',
        ],
        'vrsDigilockerVerificationFetchDocument' => [
            'application/json',
        ],
        'vrsDigilockerVerificationFetchStatus' => [
            'application/json',
        ],
        'vrsDrivingLicenseVerification' => [
            'application/json',
        ],
        'vrsESignCreateSignature' => [
            'application/json',
        ],
        'vrsESignUploadDocument' => [
            'multipart/form-data',
        ],
        'vrsESignVerificationFetchStatus' => [
            'application/json',
        ],
        'vrsFaceMatchVerification' => [
            'multipart/form-data',
        ],
        'vrsGstinVerification' => [
            'application/json',
        ],
        'vrsIpVerification' => [
            'application/json',
        ],
        'vrsLivelinessCheck' => [
            'multipart/form-data',
        ],
        'vrsNameMatchVerification' => [
            'application/json',
        ],
        'vrsBulkPanVerification' => [
            'application/json',
        ],
        'vrsFetchBulkPanDetails' => [
            'application/json',
        ],
        'vrsFetchPanDetails' => [
            'application/json',
        ],
        'vrsPanAdvanceVerification' => [
            'application/json',
        ],
        'vrsPanOcrVerification' => [
            'multipart/form-data',
        ],
        'vrsPanVerification' => [
            'application/json',
        ],
        'vrsPanToGstinVerification' => [
            'application/json',
        ],
        'vrsPassportVerification' => [
            'application/json',
        ],
        'vrsReverseGeocodingVerification' => [
            'application/json',
        ],
        'vrsReversePennyDropCreateRequest' => [
            'application/json',
        ],
        'vrsReversePennyDropFetchStatus' => [
            'application/json',
        ],
        'vrsVehicleRcVerification' => [
            'application/json',
        ],
        'vrsVoterIdVerification' => [
            'application/json',
        ],
    ];



    public function VrsAadhaarOcrVerification($verification_id, $front_image, $x_api_version = null, $x_cf_signature = null, $back_image = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsAadhaarOcrVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsAadhaarOcrVerification'][0];
        $request = $this->vrsAadhaarOcrVerificationRequest($verification_id, $front_image, $x_api_version, $x_cf_signature, $back_image, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\AadhaarOcrResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\AadhaarOcrResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\AadhaarOcrResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\AadhaarOcrResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\AadhaarOcrResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsAadhaarOcrVerificationRequest($verification_id, $front_image, $x_api_version = null, $x_cf_signature = null, $back_image = null, string $contentType = self::contentTypes['vrsAadhaarOcrVerification'][0])
    {

        // verify the required parameter 'verification_id' is set
        if ($verification_id === null || (is_array($verification_id) && count($verification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verification_id when calling vrsAadhaarOcrVerification'
            );
        }

        // verify the required parameter 'front_image' is set
        if ($front_image === null || (is_array($front_image) && count($front_image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $front_image when calling vrsAadhaarOcrVerification'
            );
        }





        $resourcePath = '/document/aadhaar';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }



        // form params
        if ($verification_id !== null) {
            $formParams['verification_id'] = ObjectSerializer::toFormValue($verification_id);
        }
        // form params
        if ($back_image !== null) {
            $multipart = true;
            $formParams['back_image'] = [];
            $paramFiles = is_array($back_image) ? $back_image : [$back_image];
            foreach ($paramFiles as $paramFile) {
                $formParams['back_image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($front_image !== null) {
            $multipart = true;
            $formParams['front_image'] = [];
            $paramFiles = is_array($front_image) ? $front_image : [$front_image];
            foreach ($paramFiles as $paramFile) {
                $formParams['front_image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsMaskAadhaar($image, $verification_id, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsMaskAadhaar",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsMaskAadhaar'][0];
        $request = $this->vrsMaskAadhaarRequest($image, $verification_id, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\AadhaarMaskingResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\AadhaarMaskingResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\AadhaarMaskingResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\XClientIdMissing' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\XClientIdMissing' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\XClientIdMissing', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\AadhaarMaskingResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\AadhaarMaskingResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\XClientIdMissing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsMaskAadhaarRequest($image, $verification_id, $x_cf_signature = null, string $contentType = self::contentTypes['vrsMaskAadhaar'][0])
    {

        // verify the required parameter 'image' is set
        if ($image === null || (is_array($image) && count($image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image when calling vrsMaskAadhaar'
            );
        }

        // verify the required parameter 'verification_id' is set
        if ($verification_id === null || (is_array($verification_id) && count($verification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verification_id when calling vrsMaskAadhaar'
            );
        }



        $resourcePath = '/aadhaar-masking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }



        // form params
        if ($image !== null) {
            $multipart = true;
            $formParams['image'] = [];
            $paramFiles = is_array($image) ? $image : [$image];
            foreach ($paramFiles as $paramFile) {
                $formParams['image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($verification_id !== null) {
            $formParams['verification_id'] = ObjectSerializer::toFormValue($verification_id);
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsOfflineAadhaarSendOtp($offline_aadhaar_send_otp_request_schema, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsOfflineAadhaarSendOtp",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsOfflineAadhaarSendOtp'][0];
        $request = $this->vrsOfflineAadhaarSendOtpRequest($offline_aadhaar_send_otp_request_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\OfflineAadhaarSendOtpResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\OfflineAadhaarSendOtpResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\OfflineAadhaarSendOtpResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\OfflineAadhaarSendOtpResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\OfflineAadhaarSendOtpResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsOfflineAadhaarSendOtpRequest($offline_aadhaar_send_otp_request_schema, string $contentType = self::contentTypes['vrsOfflineAadhaarSendOtp'][0])
    {

        // verify the required parameter 'offline_aadhaar_send_otp_request_schema' is set
        if ($offline_aadhaar_send_otp_request_schema === null || (is_array($offline_aadhaar_send_otp_request_schema) && count($offline_aadhaar_send_otp_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offline_aadhaar_send_otp_request_schema when calling vrsOfflineAadhaarSendOtp'
            );
        }


        $resourcePath = '/offline-aadhaar/otp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($offline_aadhaar_send_otp_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($offline_aadhaar_send_otp_request_schema));
            } else {
                $httpBody = $offline_aadhaar_send_otp_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsOfflineAadhaarVerifyOtp($offline_aadhaar_verify_otp_request_schema, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsOfflineAadhaarVerifyOtp",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsOfflineAadhaarVerifyOtp'][0];
        $request = $this->vrsOfflineAadhaarVerifyOtpRequest($offline_aadhaar_verify_otp_request_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\OfflineAadhaarVerifyOtpResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\OfflineAadhaarVerifyOtpResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\OfflineAadhaarVerifyOtpResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\OfflineAadhaarVerifyOtpResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\OfflineAadhaarVerifyOtpResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsOfflineAadhaarVerifyOtpRequest($offline_aadhaar_verify_otp_request_schema, string $contentType = self::contentTypes['vrsOfflineAadhaarVerifyOtp'][0])
    {

        // verify the required parameter 'offline_aadhaar_verify_otp_request_schema' is set
        if ($offline_aadhaar_verify_otp_request_schema === null || (is_array($offline_aadhaar_verify_otp_request_schema) && count($offline_aadhaar_verify_otp_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offline_aadhaar_verify_otp_request_schema when calling vrsOfflineAadhaarVerifyOtp'
            );
        }


        $resourcePath = '/offline-aadhaar/verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($offline_aadhaar_verify_otp_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($offline_aadhaar_verify_otp_request_schema));
            } else {
                $httpBody = $offline_aadhaar_verify_otp_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsAdvanceEmploymentVerification($advance_employment_request_schema, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsAdvanceEmploymentVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsAdvanceEmploymentVerification'][0];
        $request = $this->vrsAdvanceEmploymentVerificationRequest($advance_employment_request_schema, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\AdvanceEmploymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\AdvanceEmploymentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\AdvanceEmploymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\AdvanceEmploymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\AdvanceEmploymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsAdvanceEmploymentVerificationRequest($advance_employment_request_schema, $x_cf_signature = null, string $contentType = self::contentTypes['vrsAdvanceEmploymentVerification'][0])
    {

        // verify the required parameter 'advance_employment_request_schema' is set
        if ($advance_employment_request_schema === null || (is_array($advance_employment_request_schema) && count($advance_employment_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $advance_employment_request_schema when calling vrsAdvanceEmploymentVerification'
            );
        }



        $resourcePath = '/advance-employment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($advance_employment_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($advance_employment_request_schema));
            } else {
                $httpBody = $advance_employment_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsCinVerification($cin_request_schema, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsCinVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsCinVerification'][0];
        $request = $this->vrsCinVerificationRequest($cin_request_schema, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\CinResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\CinResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\CinResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\CinResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\CinResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsCinVerificationRequest($cin_request_schema, $x_cf_signature = null, string $contentType = self::contentTypes['vrsCinVerification'][0])
    {

        // verify the required parameter 'cin_request_schema' is set
        if ($cin_request_schema === null || (is_array($cin_request_schema) && count($cin_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cin_request_schema when calling vrsCinVerification'
            );
        }



        $resourcePath = '/cin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($cin_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cin_request_schema));
            } else {
                $httpBody = $cin_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsDigilockerVerificationCreateUrl($digi_locker_verification_create_url_request_schema, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsDigilockerVerificationCreateUrl",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsDigilockerVerificationCreateUrl'][0];
        $request = $this->vrsDigilockerVerificationCreateUrlRequest($digi_locker_verification_create_url_request_schema, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\DigiLockerVerificationCreateUrlResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\DigiLockerVerificationCreateUrlResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\DigiLockerVerificationCreateUrlResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\DigiLockerVerificationCreateUrlResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\DigiLockerVerificationCreateUrlResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsDigilockerVerificationCreateUrlRequest($digi_locker_verification_create_url_request_schema, $x_cf_signature = null, string $contentType = self::contentTypes['vrsDigilockerVerificationCreateUrl'][0])
    {

        // verify the required parameter 'digi_locker_verification_create_url_request_schema' is set
        if ($digi_locker_verification_create_url_request_schema === null || (is_array($digi_locker_verification_create_url_request_schema) && count($digi_locker_verification_create_url_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $digi_locker_verification_create_url_request_schema when calling vrsDigilockerVerificationCreateUrl'
            );
        }



        $resourcePath = '/digilocker';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($digi_locker_verification_create_url_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($digi_locker_verification_create_url_request_schema));
            } else {
                $httpBody = $digi_locker_verification_create_url_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsDigilockerVerificationFetchDocument($document_type, $x_cf_signature = null, $reference_id = 12345, $verification_id = 'ABC000123', GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsDigilockerVerificationFetchDocument",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsDigilockerVerificationFetchDocument'][0];
        $request = $this->vrsDigilockerVerificationFetchDocumentRequest($document_type, $x_cf_signature, $reference_id, $verification_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\DigiLockerVerificationGetDocumentResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\DigiLockerVerificationGetDocumentResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\DigiLockerVerificationGetDocumentResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\DigiLockerVerificationGetDocumentResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\DigiLockerVerificationGetDocumentResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsDigilockerVerificationFetchDocumentRequest($document_type, $x_cf_signature = null, $reference_id = 12345, $verification_id = 'ABC000123', string $contentType = self::contentTypes['vrsDigilockerVerificationFetchDocument'][0])
    {

        // verify the required parameter 'document_type' is set
        if ($document_type === null || (is_array($document_type) && count($document_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type when calling vrsDigilockerVerificationFetchDocument'
            );
        }





        $resourcePath = '/digilocker/document/{document_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference_id,
            'reference_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $verification_id,
            'verification_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }


        // path params
        if ($document_type !== null) {
            $resourcePath = str_replace(
                '{' . 'document_type' . '}',
                ObjectSerializer::toPathValue($document_type),
                $resourcePath
            );
        }


        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsDigilockerVerificationFetchStatus($x_cf_signature = null, $reference_id = 12345, $verification_id = 'ABC00123', GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsDigilockerVerificationFetchStatus",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsDigilockerVerificationFetchStatus'][0];
        $request = $this->vrsDigilockerVerificationFetchStatusRequest($x_cf_signature, $reference_id, $verification_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\DigiLockerVerificationGetStatusResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\DigiLockerVerificationGetStatusResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\DigiLockerVerificationGetStatusResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\DigiLockerVerificationGetStatusResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\DigiLockerVerificationGetStatusResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsDigilockerVerificationFetchStatusRequest($x_cf_signature = null, $reference_id = 12345, $verification_id = 'ABC00123', string $contentType = self::contentTypes['vrsDigilockerVerificationFetchStatus'][0])
    {





        $resourcePath = '/digilocker';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference_id,
            'reference_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $verification_id,
            'verification_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsDrivingLicenseVerification($driving_license_request_schema, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsDrivingLicenseVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsDrivingLicenseVerification'][0];
        $request = $this->vrsDrivingLicenseVerificationRequest($driving_license_request_schema, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\DrivingLicenseResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\DrivingLicenseResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\DrivingLicenseResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\DrivingLicenseResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\DrivingLicenseResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsDrivingLicenseVerificationRequest($driving_license_request_schema, $x_cf_signature = null, string $contentType = self::contentTypes['vrsDrivingLicenseVerification'][0])
    {

        // verify the required parameter 'driving_license_request_schema' is set
        if ($driving_license_request_schema === null || (is_array($driving_license_request_schema) && count($driving_license_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $driving_license_request_schema when calling vrsDrivingLicenseVerification'
            );
        }



        $resourcePath = '/driving-license';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($driving_license_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($driving_license_request_schema));
            } else {
                $httpBody = $driving_license_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsESignCreateSignature($e_sign_verification_create_signature_request_schema, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsESignCreateSignature",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsESignCreateSignature'][0];
        $request = $this->vrsESignCreateSignatureRequest($e_sign_verification_create_signature_request_schema, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\ESignVerificationCreateSignatureResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ESignVerificationCreateSignatureResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ESignVerificationCreateSignatureResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\ESignVerificationCreateSignatureResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ESignVerificationCreateSignatureResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsESignCreateSignatureRequest($e_sign_verification_create_signature_request_schema, $x_cf_signature = null, string $contentType = self::contentTypes['vrsESignCreateSignature'][0])
    {

        // verify the required parameter 'e_sign_verification_create_signature_request_schema' is set
        if ($e_sign_verification_create_signature_request_schema === null || (is_array($e_sign_verification_create_signature_request_schema) && count($e_sign_verification_create_signature_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $e_sign_verification_create_signature_request_schema when calling vrsESignCreateSignature'
            );
        }



        $resourcePath = '/esignature';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($e_sign_verification_create_signature_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($e_sign_verification_create_signature_request_schema));
            } else {
                $httpBody = $e_sign_verification_create_signature_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsESignUploadDocument($document, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsESignUploadDocument",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsESignUploadDocument'][0];
        $request = $this->vrsESignUploadDocumentRequest($document, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\ESignVerificationUploadDocumentResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ESignVerificationUploadDocumentResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ESignVerificationUploadDocumentResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\ESignVerificationUploadDocumentResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ESignVerificationUploadDocumentResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsESignUploadDocumentRequest($document, $x_cf_signature = null, string $contentType = self::contentTypes['vrsESignUploadDocument'][0])
    {

        // verify the required parameter 'document' is set
        if ($document === null || (is_array($document) && count($document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document when calling vrsESignUploadDocument'
            );
        }



        $resourcePath = '/esignature/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }



        // form params
        if ($document !== null) {
            $multipart = true;
            $formParams['document'] = [];
            $paramFiles = is_array($document) ? $document : [$document];
            foreach ($paramFiles as $paramFile) {
                $formParams['document'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsESignVerificationFetchStatus($x_cf_signature = null, $reference_id = 54321, $verification_id = 'ABC00123', GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsESignVerificationFetchStatus",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsESignVerificationFetchStatus'][0];
        $request = $this->vrsESignVerificationFetchStatusRequest($x_cf_signature, $reference_id, $verification_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\ESignVerificationGetStatusResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ESignVerificationGetStatusResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ESignVerificationGetStatusResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\ESignVerificationGetStatusResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ESignVerificationGetStatusResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsESignVerificationFetchStatusRequest($x_cf_signature = null, $reference_id = 54321, $verification_id = 'ABC00123', string $contentType = self::contentTypes['vrsESignVerificationFetchStatus'][0])
    {





        $resourcePath = '/esignature';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference_id,
            'reference_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $verification_id,
            'verification_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsFaceMatchVerification($verification_id, $first_image, $second_image, $x_cf_signature = null, $threshold = '0.5', $detect_mask_first_image = null, $detect_mask_second_image = null, $align_horizontally = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsFaceMatchVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsFaceMatchVerification'][0];
        $request = $this->vrsFaceMatchVerificationRequest($verification_id, $first_image, $second_image, $x_cf_signature, $threshold, $detect_mask_first_image, $detect_mask_second_image, $align_horizontally, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\FaceMatchResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\FaceMatchResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\FaceMatchResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\FaceMatchResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\FaceMatchResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsFaceMatchVerificationRequest($verification_id, $first_image, $second_image, $x_cf_signature = null, $threshold = '0.5', $detect_mask_first_image = null, $detect_mask_second_image = null, $align_horizontally = null, string $contentType = self::contentTypes['vrsFaceMatchVerification'][0])
    {

        // verify the required parameter 'verification_id' is set
        if ($verification_id === null || (is_array($verification_id) && count($verification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verification_id when calling vrsFaceMatchVerification'
            );
        }

        // verify the required parameter 'first_image' is set
        if ($first_image === null || (is_array($first_image) && count($first_image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_image when calling vrsFaceMatchVerification'
            );
        }

        // verify the required parameter 'second_image' is set
        if ($second_image === null || (is_array($second_image) && count($second_image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $second_image when calling vrsFaceMatchVerification'
            );
        }







        $resourcePath = '/face-match';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }



        // form params
        if ($verification_id !== null) {
            $formParams['verification_id'] = ObjectSerializer::toFormValue($verification_id);
        }
        // form params
        if ($first_image !== null) {
            $multipart = true;
            $formParams['first_image'] = [];
            $paramFiles = is_array($first_image) ? $first_image : [$first_image];
            foreach ($paramFiles as $paramFile) {
                $formParams['first_image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($second_image !== null) {
            $multipart = true;
            $formParams['second_image'] = [];
            $paramFiles = is_array($second_image) ? $second_image : [$second_image];
            foreach ($paramFiles as $paramFile) {
                $formParams['second_image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($threshold !== null) {
            $formParams['threshold'] = ObjectSerializer::toFormValue($threshold);
        }
        // form params
        if ($detect_mask_first_image !== null) {
            $formParams['detect_mask_first_image'] = ObjectSerializer::toFormValue($detect_mask_first_image);
        }
        // form params
        if ($detect_mask_second_image !== null) {
            $formParams['detect_mask_second_image'] = ObjectSerializer::toFormValue($detect_mask_second_image);
        }
        // form params
        if ($align_horizontally !== null) {
            $formParams['align_horizontally'] = ObjectSerializer::toFormValue($align_horizontally);
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsGstinVerification($gstin_request_schema, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsGstinVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsGstinVerification'][0];
        $request = $this->vrsGstinVerificationRequest($gstin_request_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\GstinResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\GstinResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\GstinResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\GstinResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\GstinResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsGstinVerificationRequest($gstin_request_schema, string $contentType = self::contentTypes['vrsGstinVerification'][0])
    {

        // verify the required parameter 'gstin_request_schema' is set
        if ($gstin_request_schema === null || (is_array($gstin_request_schema) && count($gstin_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gstin_request_schema when calling vrsGstinVerification'
            );
        }


        $resourcePath = '/gstin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($gstin_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($gstin_request_schema));
            } else {
                $httpBody = $gstin_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsIpVerification($ip_verification_request_schema, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsIpVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsIpVerification'][0];
        $request = $this->vrsIpVerificationRequest($ip_verification_request_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\IpVerificationResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\IpVerificationResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\IpVerificationResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cashfree\Model\V2ErrorResponse404SchemaIpVerification' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\V2ErrorResponse404SchemaIpVerification' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\V2ErrorResponse404SchemaIpVerification', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\IpVerificationResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\IpVerificationResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\V2ErrorResponse404SchemaIpVerification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsIpVerificationRequest($ip_verification_request_schema, string $contentType = self::contentTypes['vrsIpVerification'][0])
    {

        // verify the required parameter 'ip_verification_request_schema' is set
        if ($ip_verification_request_schema === null || (is_array($ip_verification_request_schema) && count($ip_verification_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ip_verification_request_schema when calling vrsIpVerification'
            );
        }


        $resourcePath = '/ip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($ip_verification_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ip_verification_request_schema));
            } else {
                $httpBody = $ip_verification_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsLivelinessCheck($verification_id, $image, $x_cf_signature = null, $strict_check = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsLivelinessCheck",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsLivelinessCheck'][0];
        $request = $this->vrsLivelinessCheckRequest($verification_id, $image, $x_cf_signature, $strict_check, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\LivelinessResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\LivelinessResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\LivelinessResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\LivelinessResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\LivelinessResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsLivelinessCheckRequest($verification_id, $image, $x_cf_signature = null, $strict_check = null, string $contentType = self::contentTypes['vrsLivelinessCheck'][0])
    {

        // verify the required parameter 'verification_id' is set
        if ($verification_id === null || (is_array($verification_id) && count($verification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verification_id when calling vrsLivelinessCheck'
            );
        }

        // verify the required parameter 'image' is set
        if ($image === null || (is_array($image) && count($image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image when calling vrsLivelinessCheck'
            );
        }




        $resourcePath = '/liveliness';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }



        // form params
        if ($verification_id !== null) {
            $formParams['verification_id'] = ObjectSerializer::toFormValue($verification_id);
        }
        // form params
        if ($image !== null) {
            $multipart = true;
            $formParams['image'] = [];
            $paramFiles = is_array($image) ? $image : [$image];
            foreach ($paramFiles as $paramFile) {
                $formParams['image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($strict_check !== null) {
            $formParams['strict_check'] = ObjectSerializer::toFormValue($strict_check);
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsNameMatchVerification($name_match_request_schema, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsNameMatchVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsNameMatchVerification'][0];
        $request = $this->vrsNameMatchVerificationRequest($name_match_request_schema, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\NameMatchResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\NameMatchResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\NameMatchResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\NameMatchResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\NameMatchResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsNameMatchVerificationRequest($name_match_request_schema, $x_cf_signature = null, string $contentType = self::contentTypes['vrsNameMatchVerification'][0])
    {

        // verify the required parameter 'name_match_request_schema' is set
        if ($name_match_request_schema === null || (is_array($name_match_request_schema) && count($name_match_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_match_request_schema when calling vrsNameMatchVerification'
            );
        }



        $resourcePath = '/name-match';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($name_match_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($name_match_request_schema));
            } else {
                $httpBody = $name_match_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsBulkPanVerification($bulk_pan_request_schema, $x_api_version = null, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsBulkPanVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsBulkPanVerification'][0];
        $request = $this->vrsBulkPanVerificationRequest($bulk_pan_request_schema, $x_api_version, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\PostPanBulkResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\PostPanBulkResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\PostPanBulkResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\PostPanBulkResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\PostPanBulkResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsBulkPanVerificationRequest($bulk_pan_request_schema, $x_api_version = null, $x_cf_signature = null, string $contentType = self::contentTypes['vrsBulkPanVerification'][0])
    {

        // verify the required parameter 'bulk_pan_request_schema' is set
        if ($bulk_pan_request_schema === null || (is_array($bulk_pan_request_schema) && count($bulk_pan_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_pan_request_schema when calling vrsBulkPanVerification'
            );
        }




        $resourcePath = '/pan/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($bulk_pan_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_pan_request_schema));
            } else {
                $httpBody = $bulk_pan_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsFetchBulkPanDetails($reference_id, $bulk_verification_id, $x_api_version = null, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsFetchBulkPanDetails",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsFetchBulkPanDetails'][0];
        $request = $this->vrsFetchBulkPanDetailsRequest($reference_id, $bulk_verification_id, $x_api_version, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\GetPanBulkResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\GetPanBulkResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\GetPanBulkResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\GetPanBulkResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\GetPanBulkResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsFetchBulkPanDetailsRequest($reference_id, $bulk_verification_id, $x_api_version = null, $x_cf_signature = null, string $contentType = self::contentTypes['vrsFetchBulkPanDetails'][0])
    {

        // verify the required parameter 'reference_id' is set
        if ($reference_id === null || (is_array($reference_id) && count($reference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_id when calling vrsFetchBulkPanDetails'
            );
        }

        // verify the required parameter 'bulk_verification_id' is set
        if ($bulk_verification_id === null || (is_array($bulk_verification_id) && count($bulk_verification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_verification_id when calling vrsFetchBulkPanDetails'
            );
        }




        $resourcePath = '/pan/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference_id,
            'reference_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bulk_verification_id,
            'bulk_verification_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsFetchPanDetails($reference_id, $x_api_version = null, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsFetchPanDetails",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsFetchPanDetails'][0];
        $request = $this->vrsFetchPanDetailsRequest($reference_id, $x_api_version, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\GetVerifyPanResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\GetVerifyPanResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\GetVerifyPanResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\GetVerifyPanResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\GetVerifyPanResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsFetchPanDetailsRequest($reference_id, $x_api_version = null, $x_cf_signature = null, string $contentType = self::contentTypes['vrsFetchPanDetails'][0])
    {

        // verify the required parameter 'reference_id' is set
        if ($reference_id === null || (is_array($reference_id) && count($reference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_id when calling vrsFetchPanDetails'
            );
        }




        $resourcePath = '/pan/{reference_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }


        // path params
        if ($reference_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reference_id' . '}',
                ObjectSerializer::toPathValue($reference_id),
                $resourcePath
            );
        }


        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsPanAdvanceVerification($pan_advance_request_schema, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsPanAdvanceVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsPanAdvanceVerification'][0];
        $request = $this->vrsPanAdvanceVerificationRequest($pan_advance_request_schema, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\PanAdvanceResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\PanAdvanceResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\PanAdvanceResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\PanAdvanceResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\PanAdvanceResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsPanAdvanceVerificationRequest($pan_advance_request_schema, $x_cf_signature = null, string $contentType = self::contentTypes['vrsPanAdvanceVerification'][0])
    {

        // verify the required parameter 'pan_advance_request_schema' is set
        if ($pan_advance_request_schema === null || (is_array($pan_advance_request_schema) && count($pan_advance_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pan_advance_request_schema when calling vrsPanAdvanceVerification'
            );
        }



        $resourcePath = '/pan/advance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($pan_advance_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pan_advance_request_schema));
            } else {
                $httpBody = $pan_advance_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsPanOcrVerification($verification_id, $front_image, $x_api_version = null, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsPanOcrVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsPanOcrVerification'][0];
        $request = $this->vrsPanOcrVerificationRequest($verification_id, $front_image, $x_api_version, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\PanOcrResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\PanOcrResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\PanOcrResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\PanOcrResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\PanOcrResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsPanOcrVerificationRequest($verification_id, $front_image, $x_api_version = null, $x_cf_signature = null, string $contentType = self::contentTypes['vrsPanOcrVerification'][0])
    {

        // verify the required parameter 'verification_id' is set
        if ($verification_id === null || (is_array($verification_id) && count($verification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verification_id when calling vrsPanOcrVerification'
            );
        }

        // verify the required parameter 'front_image' is set
        if ($front_image === null || (is_array($front_image) && count($front_image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $front_image when calling vrsPanOcrVerification'
            );
        }




        $resourcePath = '/document/pan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }



        // form params
        if ($verification_id !== null) {
            $formParams['verification_id'] = ObjectSerializer::toFormValue($verification_id);
        }
        // form params
        if ($front_image !== null) {
            $multipart = true;
            $formParams['front_image'] = [];
            $paramFiles = is_array($front_image) ? $front_image : [$front_image];
            foreach ($paramFiles as $paramFile) {
                $formParams['front_image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsPanVerification($pan_request_schema, $x_api_version = null, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsPanVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsPanVerification'][0];
        $request = $this->vrsPanVerificationRequest($pan_request_schema, $x_api_version, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\GetVerifyPanResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\GetVerifyPanResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\GetVerifyPanResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\GetVerifyPanResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\GetVerifyPanResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsPanVerificationRequest($pan_request_schema, $x_api_version = null, $x_cf_signature = null, string $contentType = self::contentTypes['vrsPanVerification'][0])
    {

        // verify the required parameter 'pan_request_schema' is set
        if ($pan_request_schema === null || (is_array($pan_request_schema) && count($pan_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pan_request_schema when calling vrsPanVerification'
            );
        }




        $resourcePath = '/pan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($pan_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pan_request_schema));
            } else {
                $httpBody = $pan_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsPanToGstinVerification($pan_to_gstin_request_schema, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsPanToGstinVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsPanToGstinVerification'][0];
        $request = $this->vrsPanToGstinVerificationRequest($pan_to_gstin_request_schema, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\PanToGstinResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\PanToGstinResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\PanToGstinResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\PanToGstinResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\PanToGstinResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsPanToGstinVerificationRequest($pan_to_gstin_request_schema, $x_cf_signature = null, string $contentType = self::contentTypes['vrsPanToGstinVerification'][0])
    {

        // verify the required parameter 'pan_to_gstin_request_schema' is set
        if ($pan_to_gstin_request_schema === null || (is_array($pan_to_gstin_request_schema) && count($pan_to_gstin_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pan_to_gstin_request_schema when calling vrsPanToGstinVerification'
            );
        }



        $resourcePath = '/pan-gstin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($pan_to_gstin_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pan_to_gstin_request_schema));
            } else {
                $httpBody = $pan_to_gstin_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsPassportVerification($passport_verification_request_schema, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsPassportVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsPassportVerification'][0];
        $request = $this->vrsPassportVerificationRequest($passport_verification_request_schema, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\PassportVerificationResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\PassportVerificationResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\PassportVerificationResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\PassportVerificationResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\PassportVerificationResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsPassportVerificationRequest($passport_verification_request_schema, $x_cf_signature = null, string $contentType = self::contentTypes['vrsPassportVerification'][0])
    {

        // verify the required parameter 'passport_verification_request_schema' is set
        if ($passport_verification_request_schema === null || (is_array($passport_verification_request_schema) && count($passport_verification_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $passport_verification_request_schema when calling vrsPassportVerification'
            );
        }



        $resourcePath = '/passport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($passport_verification_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($passport_verification_request_schema));
            } else {
                $httpBody = $passport_verification_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsReverseGeocodingVerification($reverse_geocoding_request_schema, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsReverseGeocodingVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsReverseGeocodingVerification'][0];
        $request = $this->vrsReverseGeocodingVerificationRequest($reverse_geocoding_request_schema, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\ReverseGeocodingResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ReverseGeocodingResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ReverseGeocodingResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\ReverseGeocodingResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ReverseGeocodingResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsReverseGeocodingVerificationRequest($reverse_geocoding_request_schema, $x_cf_signature = null, string $contentType = self::contentTypes['vrsReverseGeocodingVerification'][0])
    {

        // verify the required parameter 'reverse_geocoding_request_schema' is set
        if ($reverse_geocoding_request_schema === null || (is_array($reverse_geocoding_request_schema) && count($reverse_geocoding_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reverse_geocoding_request_schema when calling vrsReverseGeocodingVerification'
            );
        }



        $resourcePath = '/reverse-geocoding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($reverse_geocoding_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reverse_geocoding_request_schema));
            } else {
                $httpBody = $reverse_geocoding_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsReversePennyDropCreateRequest($create_request_request_schema, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsReversePennyDropCreateRequest",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsReversePennyDropCreateRequest'][0];
        $request = $this->vrsReversePennyDropCreateRequestRequest($create_request_request_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\CreateRequestResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\CreateRequestResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\CreateRequestResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\CreateRequestResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\CreateRequestResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsReversePennyDropCreateRequestRequest($create_request_request_schema, string $contentType = self::contentTypes['vrsReversePennyDropCreateRequest'][0])
    {

        // verify the required parameter 'create_request_request_schema' is set
        if ($create_request_request_schema === null || (is_array($create_request_request_schema) && count($create_request_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_request_request_schema when calling vrsReversePennyDropCreateRequest'
            );
        }


        $resourcePath = '/reverse-penny-drop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($create_request_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_request_request_schema));
            } else {
                $httpBody = $create_request_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsReversePennyDropFetchStatus($ref_id = '10', $verification_id = '1234', GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsReversePennyDropFetchStatus",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsReversePennyDropFetchStatus'][0];
        $request = $this->vrsReversePennyDropFetchStatusRequest($ref_id, $verification_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\GetStatusRpdResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\GetStatusRpdResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\GetStatusRpdResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\GetStatusRpdResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\GetStatusRpdResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsReversePennyDropFetchStatusRequest($ref_id = '10', $verification_id = '1234', string $contentType = self::contentTypes['vrsReversePennyDropFetchStatus'][0])
    {




        $resourcePath = '/remitter/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ref_id,
            'ref_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $verification_id,
            'verification_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsVehicleRcVerification($vehicle_rc_request_schema, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsVehicleRcVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsVehicleRcVerification'][0];
        $request = $this->vrsVehicleRcVerificationRequest($vehicle_rc_request_schema, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\VehicleRcResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\VehicleRcResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\VehicleRcResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\VehicleRcResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\VehicleRcResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsVehicleRcVerificationRequest($vehicle_rc_request_schema, $x_cf_signature = null, string $contentType = self::contentTypes['vrsVehicleRcVerification'][0])
    {

        // verify the required parameter 'vehicle_rc_request_schema' is set
        if ($vehicle_rc_request_schema === null || (is_array($vehicle_rc_request_schema) && count($vehicle_rc_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vehicle_rc_request_schema when calling vrsVehicleRcVerification'
            );
        }



        $resourcePath = '/vehicle-rc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($vehicle_rc_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($vehicle_rc_request_schema));
            } else {
                $httpBody = $vehicle_rc_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    public function VrsVoterIdVerification($voter_id_request_schema, $x_cf_signature = null, GuzzleHttp\Client $http_client = null)
    {

        $env = "sandbox";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $env = "production";
        }
        if(CashfreeVrs::$XEnableErrorAnalytics) {
            \Sentry\init([
                'dsn' => 'https://f694e61bc6394e80bd2f687a4249a204@o330525.ingest.sentry.io/4505248768327680',
                'environment' => $env."VrsVoterIdVerification",
                'attach_stacktrace' => true,
                'release' => '3.0.0',
                'traces_sample_rate' => 1.0,
                'before_send' => function (\Sentry\Event $event): ?\Sentry\Event {
                    $cashfreeverification = "cashfree-verification";
                    if (count($event->getExceptions()) > 0 && count($event->getExceptions()[0]->getStackTrace()->getFrames()) > 0) {
                    if (strpos($event->getExceptions()[0]->getStackTrace()->getFrames()[0]->getFile(), $cashfreeverification) !== false) {
                        $osContext = $event->getOsContext();
                        $osContext->setKernelVersion("");
                        $osContext->setMachineType("");
                        $osContext->setKernelVersion("");
                        $osContext->setVersion("");
                        $event->setOsContext($osContext);
                        if(CashfreeVrs::$XEnableErrorAnalytics) {
                            return $event;
                        }
                        return null;
                    }
                    }
                return null;
                },
            ]);
        }

        $this->client = new Client();
        if($http_client !== null) {
            $this->client = $http_client;
        }
        $this->headerSelector = new HeaderSelector();
        $contentType = self::contentTypes['vrsVoterIdVerification'][0];
        $request = $this->vrsVoterIdVerificationRequest($voter_id_request_schema, $x_cf_signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cashfree\Model\VoterIdResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\VoterIdResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\VoterIdResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 502:
                    if ('\Cashfree\Model\ErrorResponseSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cashfree\Model\ErrorResponseSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cashfree\Model\ErrorResponseSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cashfree\Model\VoterIdResponseSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\VoterIdResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 502:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cashfree\Model\ErrorResponseSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    public function vrsVoterIdVerificationRequest($voter_id_request_schema, $x_cf_signature = null, string $contentType = self::contentTypes['vrsVoterIdVerification'][0])
    {

        // verify the required parameter 'voter_id_request_schema' is set
        if ($voter_id_request_schema === null || (is_array($voter_id_request_schema) && count($voter_id_request_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voter_id_request_schema when calling vrsVoterIdVerification'
            );
        }



        $resourcePath = '/voter-id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        $headers['x-sdk-platform'] = "phpsdk-3.0.0";

        if (CashfreeVrs::$XClientSecret !== null) {
            $headers['x-client-secret'] = CashfreeVrs::$XClientSecret;
        }

        if (CashfreeVrs::$XClientId !== null) {
            $headers['x-client-id'] = CashfreeVrs::$XClientId;
        }




        // for model (json/xml)
        if (isset($voter_id_request_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($voter_id_request_schema));
            } else {
                $httpBody = $voter_id_request_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = "https://sandbox.cashfree.com/verification";
        if(CashfreeVrs::$XEnvironment == CashfreeVrs::$PRODUCTION) {
            $operationHost = "https://api.cashfree.com/verification";
        }
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    protected function createHttpClientOption()
    {
        $options = [];

        return $options;
    }
}
